/*
 * generated by Xtext 2.12.0
 */
package org.sabsa.dasl.validation

import org.eclipse.xtext.validation.Check
import org.sabsa.dasl.dasl.Flow
import org.sabsa.dasl.dasl.Node

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class DaslValidator extends AbstractDaslValidator {
	
	@Check
	def checkElementsStartsWithCapital(Node node) {
		if (!Character.isUpperCase(node.name.charAt(0))) {
			warning("msg", node, null)
		}
	}
	
	@Check
	def checkFlowHasAtLeastOneInformationAsset(Flow f) {
		if (!Validator.doesFlowHaveAtLeastOneInformationAsset(f)) {
			error("Flow " + f.name + " has no information assets", f, null)
		}
	}
	
	@Check
	def checkFlowHasAtLeastOneControl(Flow f) {
		if (!(f.getControls().size()>0)) {
			error("Flow " + f.name + " has no controls", f, null)
		}
	}
	
	@Check
	def checkAllNodesAreInAZone(Node node) {
		if (!Validator.isNodeInAtLeastOneZone(node)) {
			error("Node " + node.name + " is not associated to any zone", node, null)
		}
	}
	
	@Check
	def checkFlowDoesNotViolateZoneRules(Flow f) {
		if (Validator.doesFlowViolateZoneRules(f)) {
			error("Flow " + f.name + " violates zone rules", f, null)
		}		
	}
}
