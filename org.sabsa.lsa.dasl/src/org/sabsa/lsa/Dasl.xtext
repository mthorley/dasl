grammar org.sabsa.dasl.Dasl with org.eclipse.xtext.common.Terminals

generate dasl "http://www.sabsa.org/dasl/Dasl"

// The security view of the architecture - this can be expanded to other views later.

SecurityModel:
	imports+=Import*
//	includes+=(Include)*
	(metadata=Metadata)?
	(elements+=AbstractElement)*
;

enum NodeType :
	PHYSICAL | VIRTUAL | CONTAINER
;

// Override to allow . or - in IDs e.g. F1.1 or NIST.AC-1
@Override
terminal ID: 
    ('^')?('a'..'z'|'A'..'Z'|'_'|'.'|'-') ('a'..'z'|'A'..'Z'|'_'|'0'..'9'|'.'|'-')*
;

QualifiedName: 
	ID ('.' ID)*
;

QualifiedNameWithWildcard:
  QualifiedName '.*'?
;

//Include:
//  'include' includedModel = [SecurityModel | STRING]
//;

Import:
  'import' importURI = STRING
;

Metadata:
  {Metadata} 'metadata' (keys+=MetadataType)*
;

/**
 * Metadata for visualisation and report generation
 */
enum MetadataType:
	SHOW_CONTROLS_ON_COMPONENTS |
	SHOW_CONTROLS_ON_FLOWS |
	SHOW_ASSETS_ON_FLOWS |
	SHOW_ASSETS_ON_COMPONENTS
;

/**
 * Zones represent trust boundaries for nodes and
 * dictate which zones are allowed to connect.
 */ 
Zone:
  'zone' name=ID '{'
	'trustLevel'	trust=INT
	'ingress'		(ingressZones+=[Zone])*
	'egress'		(egressZones+=[Zone])*
  	'nodes' 		nodes+=[Node]*
	('controls' 	(controls+=[Control])*)?
  '}'
;

/**
 * Nodes represent either a physical or virtual environment
 * upon which components are deployed too.
 */ 
Node:
	'node' name=ID '{'
		'ref' 		 	ref=ID
		'host'  		host=STRING
		'os'    		os=STRING
		'type' 			(value=NodeType)
		('components' 	components+=[Component]*)?
		('controls' 	(controls+=[Control])*)?
		('assets' 	 	(assets+=[InformationAsset | QualifiedName])*)?
	'}';

Component:
	'component' name=ID '{'
		'ref' 		 ref=ID
		'stereotype' stereotype=STRING
		('vendor'    vendor=STRING)?
		'desc'       desc=STRING
		'version'    version=STRING
		('assets' 	 (assets+=[InformationAsset | QualifiedName])*)?
		('controls' 	 (controls+=[Control])*)?
		components+=Component*
	'}';
	
InformationAsset:
	'informationasset' name=ID '{'
		'ref' 		 		ref=ID
		'desc'     			desc=STRING
		'confidentiality' 	confidentiality=ConfidentialityType
		'integrity' 		integrity=IntegrityType
		'availability' 		availability=AvailabilityType
	'}';

Flow:
	'flow' name=ID '{'
		('desc'				desc=STRING)?
		'from'  			from=[FlowEndpoint]
		'to' 				to=[FlowEndpoint]
		('assets' 			(assets+=[InformationAsset | QualifiedName])*)?
		('controls' 	 	(controls+=[Control])*)?
	'}';
	
Actor:
	'actor' name=ID '{'
		'desc'				desc=STRING
		'roles'				roles=STRING
	'}'
;

/*
enum ControlType:
	System |
	Process |
	Contract
;
*/

Control:
	'control' name=ID '{'
		'ref'			ref=ID
		'baseline'		base=[BaseControl]
		'description'	desc=STRING
		'attestation'   att=STRING
	'}'
;

// Keyed to NIST80053A-Rev4
BaseControl:
	'baseControl' name=ID '{'
		'family'      family=NIST80053ARev4_FamilyType
		'title'	      title=STRING
		'description' desc=STRING
	'}'
;

enum NIST80053ARev4_FamilyType:
	ACCESS_CONTROL |
	AWARENESS_AND_TRAINING |
	AUDIT_AND_ACCOUNTABILITY |
	SECURITY_ASSESSMENT_AND_AUTHORIZATION |
	CONFIGURATION_MANAGEMENT |
	CONTINGENCY_PLANNING |
	IDENTIFICATION_AND_AUTHENTICATION |
	INCIDENT_RESPONSE |
	MAINTENANCE |
	MEDIA_PROTECTION |
	PHYSICAL_AND_ENVIRONMENTAL_PROTECTION |
	PLANNING |
	PROGRAM_MANAGEMENT |
	PERSONNEL_SECURITY |
	RISK_ASSESSMENT |
	SYSTEM_AND_SERVICES_ACQUISITION |
	SYSTEM_AND_COMMUNICATIONS_PROTECTION |
	SYSTEM_AND_INFORMATION_INTEGRITY
;


/*
enum ControlType:
	IdentityValidation | 
	UserProvisioning |
	SystemUserProvisioning |
	IdentityTransformation |
	UserRegistries |
	CredentialManagement |
	Authentication |
	Authorisation |
	PrivilegeManagement |
	ReducedSignOn |
	Federation |
	AccessEntitlementGovernance |
	FirewallsNetwork |
	FirewallsApplication |
	DenialofService |
	NetworkAdmissionControl |
	RemoteAccessGateway |
	IntrusionPreventionDetection |
	Antivirus |
	ContentFilter |
	MessageSecurity |
	TransportSecurity |
	StoredDataSecurity |
	DataLossPrevention |
	DataObfuscation |
	DataDestruction |
	FraudSecurity |
	DataTransactionSecurity |
	CentralisedHSM_CA_PKI |
	Standalone |
	SecurityTesting |
	PatchManagement |
	VulnerabilityManagement |
	CentralisedReporting |
	EventCorrelation |
	SecurityAuditLogMonitoring |
	ComplianceTesting |
	IncidentManagement |
	Forensic |
	Legal
;
*/

enum ConfidentialityType:
	Public | Internal | Confidential | Restricted
;

enum IntegrityType:
	Accurate | HighlyTrusted | Trusted | Uncontrolled
;

enum AvailabilityType:
	C1 | C2 | C3 | C4 | Plastic
;

AbstractElement:
	InformationAsset | Component | Zone | Node | Actor | Control | Flow | BaseControl
;

FlowEndpoint:
	Component | Node | Actor
;
