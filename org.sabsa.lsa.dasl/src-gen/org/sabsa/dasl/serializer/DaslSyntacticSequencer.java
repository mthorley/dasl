/*
 * generated by Xtext 2.12.0
 */
package org.sabsa.dasl.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.sabsa.dasl.services.DaslGrammarAccess;

@SuppressWarnings("all")
public class DaslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected DaslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Component_AssetsKeyword_12_0_q;
	protected AbstractElementAlias match_Component_ControlsKeyword_13_0_q;
	protected AbstractElementAlias match_Flow_AssetsKeyword_7_0_q;
	protected AbstractElementAlias match_Flow_ControlsKeyword_8_0_q;
	protected AbstractElementAlias match_Node_AssetsKeyword_13_0_q;
	protected AbstractElementAlias match_Node_ComponentsKeyword_11_0_q;
	protected AbstractElementAlias match_Node_ControlsKeyword_12_0_q;
	protected AbstractElementAlias match_Zone_ControlsKeyword_11_0_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (DaslGrammarAccess) access;
		match_Component_AssetsKeyword_12_0_q = new TokenAlias(false, true, grammarAccess.getComponentAccess().getAssetsKeyword_12_0());
		match_Component_ControlsKeyword_13_0_q = new TokenAlias(false, true, grammarAccess.getComponentAccess().getControlsKeyword_13_0());
		match_Flow_AssetsKeyword_7_0_q = new TokenAlias(false, true, grammarAccess.getFlowAccess().getAssetsKeyword_7_0());
		match_Flow_ControlsKeyword_8_0_q = new TokenAlias(false, true, grammarAccess.getFlowAccess().getControlsKeyword_8_0());
		match_Node_AssetsKeyword_13_0_q = new TokenAlias(false, true, grammarAccess.getNodeAccess().getAssetsKeyword_13_0());
		match_Node_ComponentsKeyword_11_0_q = new TokenAlias(false, true, grammarAccess.getNodeAccess().getComponentsKeyword_11_0());
		match_Node_ControlsKeyword_12_0_q = new TokenAlias(false, true, grammarAccess.getNodeAccess().getControlsKeyword_12_0());
		match_Zone_ControlsKeyword_11_0_q = new TokenAlias(false, true, grammarAccess.getZoneAccess().getControlsKeyword_11_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Component_AssetsKeyword_12_0_q.equals(syntax))
				emit_Component_AssetsKeyword_12_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Component_ControlsKeyword_13_0_q.equals(syntax))
				emit_Component_ControlsKeyword_13_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Flow_AssetsKeyword_7_0_q.equals(syntax))
				emit_Flow_AssetsKeyword_7_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Flow_ControlsKeyword_8_0_q.equals(syntax))
				emit_Flow_ControlsKeyword_8_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Node_AssetsKeyword_13_0_q.equals(syntax))
				emit_Node_AssetsKeyword_13_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Node_ComponentsKeyword_11_0_q.equals(syntax))
				emit_Node_ComponentsKeyword_11_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Node_ControlsKeyword_12_0_q.equals(syntax))
				emit_Node_ControlsKeyword_12_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Zone_ControlsKeyword_11_0_q.equals(syntax))
				emit_Zone_ControlsKeyword_11_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     'assets'?
	 *
	 * This ambiguous syntax occurs at:
	 *     version=STRING (ambiguity) 'controls' controls+=[Control|ID]
	 *     version=STRING (ambiguity) 'controls'? '}' (rule end)
	 *     version=STRING (ambiguity) 'controls'? components+=Component
	 */
	protected void emit_Component_AssetsKeyword_12_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'controls'?
	 *
	 * This ambiguous syntax occurs at:
	 *     assets+=[InformationAsset|QualifiedName] (ambiguity) '}' (rule end)
	 *     assets+=[InformationAsset|QualifiedName] (ambiguity) components+=Component
	 *     version=STRING 'assets'? (ambiguity) '}' (rule end)
	 *     version=STRING 'assets'? (ambiguity) components+=Component
	 */
	protected void emit_Component_ControlsKeyword_13_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'assets'?
	 *
	 * This ambiguous syntax occurs at:
	 *     to=[FlowEndpoint|ID] (ambiguity) 'controls' controls+=[Control|ID]
	 *     to=[FlowEndpoint|ID] (ambiguity) 'controls'? '}' (rule end)
	 */
	protected void emit_Flow_AssetsKeyword_7_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'controls'?
	 *
	 * This ambiguous syntax occurs at:
	 *     assets+=[InformationAsset|QualifiedName] (ambiguity) '}' (rule end)
	 *     to=[FlowEndpoint|ID] 'assets'? (ambiguity) '}' (rule end)
	 */
	protected void emit_Flow_ControlsKeyword_8_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'assets'?
	 *
	 * This ambiguous syntax occurs at:
	 *     components+=[Component|ID] 'controls'? (ambiguity) '}' (rule end)
	 *     controls+=[Control|ID] (ambiguity) '}' (rule end)
	 *     value=NodeType 'components'? 'controls'? (ambiguity) '}' (rule end)
	 */
	protected void emit_Node_AssetsKeyword_13_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'components'?
	 *
	 * This ambiguous syntax occurs at:
	 *     value=NodeType (ambiguity) 'controls' controls+=[Control|ID]
	 *     value=NodeType (ambiguity) 'controls'? 'assets' assets+=[InformationAsset|QualifiedName]
	 *     value=NodeType (ambiguity) 'controls'? 'assets'? '}' (rule end)
	 */
	protected void emit_Node_ComponentsKeyword_11_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'controls'?
	 *
	 * This ambiguous syntax occurs at:
	 *     components+=[Component|ID] (ambiguity) 'assets' assets+=[InformationAsset|QualifiedName]
	 *     components+=[Component|ID] (ambiguity) 'assets'? '}' (rule end)
	 *     value=NodeType 'components'? (ambiguity) 'assets' assets+=[InformationAsset|QualifiedName]
	 *     value=NodeType 'components'? (ambiguity) 'assets'? '}' (rule end)
	 */
	protected void emit_Node_ControlsKeyword_12_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'controls'?
	 *
	 * This ambiguous syntax occurs at:
	 *     egressZones+=[Zone|ID] 'nodes' (ambiguity) '}' (rule end)
	 *     ingressZones+=[Zone|ID] 'egress' 'nodes' (ambiguity) '}' (rule end)
	 *     nodes+=[Node|ID] (ambiguity) '}' (rule end)
	 *     trust=INT 'ingress' 'egress' 'nodes' (ambiguity) '}' (rule end)
	 */
	protected void emit_Zone_ControlsKeyword_11_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
