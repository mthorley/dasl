/*
 * generated by Xtext 2.12.0
 */
package org.sabsa.dasl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.sabsa.dasl.dasl.Component;
import org.sabsa.dasl.dasl.Control;
import org.sabsa.dasl.dasl.DaslPackage;
import org.sabsa.dasl.dasl.Flow;
import org.sabsa.dasl.dasl.Import;
import org.sabsa.dasl.dasl.InformationAsset;
import org.sabsa.dasl.dasl.Node;
import org.sabsa.dasl.dasl.SecurityModel;
import org.sabsa.dasl.dasl.Zone;
import org.sabsa.dasl.services.DaslGrammarAccess;

@SuppressWarnings("all")
public class DaslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DaslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DaslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DaslPackage.COMPONENT:
				sequence_Component(context, (Component) semanticObject); 
				return; 
			case DaslPackage.CONTROL:
				sequence_Control(context, (Control) semanticObject); 
				return; 
			case DaslPackage.FLOW:
				sequence_Flow(context, (Flow) semanticObject); 
				return; 
			case DaslPackage.IMPORT:
				sequence_Import(context, (Import) semanticObject); 
				return; 
			case DaslPackage.INFORMATION_ASSET:
				sequence_InformationAsset(context, (InformationAsset) semanticObject); 
				return; 
			case DaslPackage.NODE:
				sequence_Node(context, (Node) semanticObject); 
				return; 
			case DaslPackage.SECURITY_MODEL:
				sequence_SecurityModel(context, (SecurityModel) semanticObject); 
				return; 
			case DaslPackage.ZONE:
				sequence_Zone(context, (Zone) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Component returns Component
	 *     AbstractElement returns Component
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         ref=ID 
	 *         stereotype=STRING 
	 *         vendor=STRING? 
	 *         desc=STRING 
	 *         version=STRING 
	 *         assets+=[InformationAsset|QualifiedName]* 
	 *         components+=Component*
	 *     )
	 */
	protected void sequence_Component(ISerializationContext context, Component semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Control returns Control
	 *     AbstractElement returns Control
	 *
	 * Constraint:
	 *     (name=ID ref=ID area=ControlType implementation=STRING)
	 */
	protected void sequence_Control(ISerializationContext context, Control semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DaslPackage.Literals.CONTROL__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DaslPackage.Literals.CONTROL__NAME));
			if (transientValues.isValueTransient(semanticObject, DaslPackage.Literals.CONTROL__REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DaslPackage.Literals.CONTROL__REF));
			if (transientValues.isValueTransient(semanticObject, DaslPackage.Literals.CONTROL__AREA) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DaslPackage.Literals.CONTROL__AREA));
			if (transientValues.isValueTransient(semanticObject, DaslPackage.Literals.CONTROL__IMPLEMENTATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DaslPackage.Literals.CONTROL__IMPLEMENTATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getControlAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getControlAccess().getRefIDTerminalRuleCall_4_0(), semanticObject.getRef());
		feeder.accept(grammarAccess.getControlAccess().getAreaControlTypeEnumRuleCall_6_0(), semanticObject.getArea());
		feeder.accept(grammarAccess.getControlAccess().getImplementationSTRINGTerminalRuleCall_8_0(), semanticObject.getImplementation());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Flow returns Flow
	 *     AbstractElement returns Flow
	 *
	 * Constraint:
	 *     (name=ID from=[Component|ID] to=[Component|ID] assets+=[InformationAsset|QualifiedName]* controls+=[Control|ID]*)
	 */
	protected void sequence_Flow(ISerializationContext context, Flow semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Import returns Import
	 *     AbstractElement returns Import
	 *
	 * Constraint:
	 *     importURI=STRING
	 */
	protected void sequence_Import(ISerializationContext context, Import semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DaslPackage.Literals.IMPORT__IMPORT_URI) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DaslPackage.Literals.IMPORT__IMPORT_URI));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0(), semanticObject.getImportURI());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     InformationAsset returns InformationAsset
	 *     AbstractElement returns InformationAsset
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         ref=ID 
	 *         desc=STRING 
	 *         confidentiality=ConfidentialityType 
	 *         integrity=IntegrityType 
	 *         availability=AvailabilityType
	 *     )
	 */
	protected void sequence_InformationAsset(ISerializationContext context, InformationAsset semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DaslPackage.Literals.INFORMATION_ASSET__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DaslPackage.Literals.INFORMATION_ASSET__NAME));
			if (transientValues.isValueTransient(semanticObject, DaslPackage.Literals.INFORMATION_ASSET__REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DaslPackage.Literals.INFORMATION_ASSET__REF));
			if (transientValues.isValueTransient(semanticObject, DaslPackage.Literals.INFORMATION_ASSET__DESC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DaslPackage.Literals.INFORMATION_ASSET__DESC));
			if (transientValues.isValueTransient(semanticObject, DaslPackage.Literals.INFORMATION_ASSET__CONFIDENTIALITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DaslPackage.Literals.INFORMATION_ASSET__CONFIDENTIALITY));
			if (transientValues.isValueTransient(semanticObject, DaslPackage.Literals.INFORMATION_ASSET__INTEGRITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DaslPackage.Literals.INFORMATION_ASSET__INTEGRITY));
			if (transientValues.isValueTransient(semanticObject, DaslPackage.Literals.INFORMATION_ASSET__AVAILABILITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DaslPackage.Literals.INFORMATION_ASSET__AVAILABILITY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInformationAssetAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getInformationAssetAccess().getRefIDTerminalRuleCall_4_0(), semanticObject.getRef());
		feeder.accept(grammarAccess.getInformationAssetAccess().getDescSTRINGTerminalRuleCall_6_0(), semanticObject.getDesc());
		feeder.accept(grammarAccess.getInformationAssetAccess().getConfidentialityConfidentialityTypeEnumRuleCall_8_0(), semanticObject.getConfidentiality());
		feeder.accept(grammarAccess.getInformationAssetAccess().getIntegrityIntegrityTypeEnumRuleCall_10_0(), semanticObject.getIntegrity());
		feeder.accept(grammarAccess.getInformationAssetAccess().getAvailabilityAvailabilityTypeEnumRuleCall_12_0(), semanticObject.getAvailability());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Node returns Node
	 *     AbstractElement returns Node
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         ref=ID 
	 *         host=STRING 
	 *         os=STRING 
	 *         value=NodeType 
	 *         components+=[Component|ID]*
	 *     )
	 */
	protected void sequence_Node(ISerializationContext context, Node semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SecurityModel returns SecurityModel
	 *
	 * Constraint:
	 *     elements+=AbstractElement+
	 */
	protected void sequence_SecurityModel(ISerializationContext context, SecurityModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Zone returns Zone
	 *     AbstractElement returns Zone
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         trust=INT 
	 *         ingressZones+=[Zone|ID]* 
	 *         egressZones+=[Zone|ID]* 
	 *         nodes+=[Node|ID]* 
	 *         controls+=[Control|ID]?
	 *     )
	 */
	protected void sequence_Zone(ISerializationContext context, Zone semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
