/*
 * generated by Xtext 2.19.0
 */
package org.sabsa.dasl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DaslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class SecurityModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sabsa.dasl.Dasl.SecurityModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsAbstractElementParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		
		//// The security view of the architecture - this can be expanded to other views later.
		//SecurityModel:
		//	imports+=Import*
		//	//	includes+=(Include)*
		//	elements+=AbstractElement*;
		@Override public ParserRule getRule() { return rule; }
		
		//imports+=Import* //	includes+=(Include)*
		//elements+=AbstractElement*
		public Group getGroup() { return cGroup; }
		
		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }
		
		////	includes+=(Include)*
		//elements+=AbstractElement*
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }
		
		//AbstractElement
		public RuleCall getElementsAbstractElementParserRuleCall_1_0() { return cElementsAbstractElementParserRuleCall_1_0; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sabsa.dasl.Dasl.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sabsa.dasl.Dasl.QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName '.*'?;
		@Override public ParserRule getRule() { return rule; }
		
		//QualifiedName '.*'?
		public Group getGroup() { return cGroup; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }
		
		//'.*'?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sabsa.dasl.Dasl.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		
		////Include:
		////  'include' includedModel = [SecurityModel | STRING]
		////;
		//Import:
		//	'import' importURI=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importURI=STRING
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }
		
		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }
	}
	public class ZoneElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sabsa.dasl.Dasl.Zone");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cZoneKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cTrustLevelKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTrustAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTrustINTTerminalRuleCall_4_0 = (RuleCall)cTrustAssignment_4.eContents().get(0);
		private final Keyword cIngressKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cIngressZonesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cIngressZonesZoneCrossReference_6_0 = (CrossReference)cIngressZonesAssignment_6.eContents().get(0);
		private final RuleCall cIngressZonesZoneIDTerminalRuleCall_6_0_1 = (RuleCall)cIngressZonesZoneCrossReference_6_0.eContents().get(1);
		private final Keyword cEgressKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cEgressZonesAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cEgressZonesZoneCrossReference_8_0 = (CrossReference)cEgressZonesAssignment_8.eContents().get(0);
		private final RuleCall cEgressZonesZoneIDTerminalRuleCall_8_0_1 = (RuleCall)cEgressZonesZoneCrossReference_8_0.eContents().get(1);
		private final Keyword cNodesKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cNodesAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final CrossReference cNodesNodeCrossReference_10_0 = (CrossReference)cNodesAssignment_10.eContents().get(0);
		private final RuleCall cNodesNodeIDTerminalRuleCall_10_0_1 = (RuleCall)cNodesNodeCrossReference_10_0.eContents().get(1);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cControlsKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cControlsAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final CrossReference cControlsControlCrossReference_11_1_0 = (CrossReference)cControlsAssignment_11_1.eContents().get(0);
		private final RuleCall cControlsControlIDTerminalRuleCall_11_1_0_1 = (RuleCall)cControlsControlCrossReference_11_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		///**
		// * Zones represent trust boundaries for nodes and
		// * dictate which zones are allowed to connect.
		// */ Zone:
		//	'zone' name=ID '{'
		//	'trustLevel' trust=INT
		//	'ingress' ingressZones+=[Zone]*
		//	'egress' egressZones+=[Zone]*
		//	'nodes' nodes+=[Node]* ('controls' controls+=[Control]*)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'zone' name=ID '{' 'trustLevel' trust=INT 'ingress' ingressZones+=[Zone]* 'egress' egressZones+=[Zone]* 'nodes'
		//nodes+=[Node]* ('controls' controls+=[Control]*)? '}'
		public Group getGroup() { return cGroup; }
		
		//'zone'
		public Keyword getZoneKeyword_0() { return cZoneKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'trustLevel'
		public Keyword getTrustLevelKeyword_3() { return cTrustLevelKeyword_3; }
		
		//trust=INT
		public Assignment getTrustAssignment_4() { return cTrustAssignment_4; }
		
		//INT
		public RuleCall getTrustINTTerminalRuleCall_4_0() { return cTrustINTTerminalRuleCall_4_0; }
		
		//'ingress'
		public Keyword getIngressKeyword_5() { return cIngressKeyword_5; }
		
		//ingressZones+=[Zone]*
		public Assignment getIngressZonesAssignment_6() { return cIngressZonesAssignment_6; }
		
		//[Zone]
		public CrossReference getIngressZonesZoneCrossReference_6_0() { return cIngressZonesZoneCrossReference_6_0; }
		
		//ID
		public RuleCall getIngressZonesZoneIDTerminalRuleCall_6_0_1() { return cIngressZonesZoneIDTerminalRuleCall_6_0_1; }
		
		//'egress'
		public Keyword getEgressKeyword_7() { return cEgressKeyword_7; }
		
		//egressZones+=[Zone]*
		public Assignment getEgressZonesAssignment_8() { return cEgressZonesAssignment_8; }
		
		//[Zone]
		public CrossReference getEgressZonesZoneCrossReference_8_0() { return cEgressZonesZoneCrossReference_8_0; }
		
		//ID
		public RuleCall getEgressZonesZoneIDTerminalRuleCall_8_0_1() { return cEgressZonesZoneIDTerminalRuleCall_8_0_1; }
		
		//'nodes'
		public Keyword getNodesKeyword_9() { return cNodesKeyword_9; }
		
		//nodes+=[Node]*
		public Assignment getNodesAssignment_10() { return cNodesAssignment_10; }
		
		//[Node]
		public CrossReference getNodesNodeCrossReference_10_0() { return cNodesNodeCrossReference_10_0; }
		
		//ID
		public RuleCall getNodesNodeIDTerminalRuleCall_10_0_1() { return cNodesNodeIDTerminalRuleCall_10_0_1; }
		
		//('controls' controls+=[Control]*)?
		public Group getGroup_11() { return cGroup_11; }
		
		//'controls'
		public Keyword getControlsKeyword_11_0() { return cControlsKeyword_11_0; }
		
		//controls+=[Control]*
		public Assignment getControlsAssignment_11_1() { return cControlsAssignment_11_1; }
		
		//[Control]
		public CrossReference getControlsControlCrossReference_11_1_0() { return cControlsControlCrossReference_11_1_0; }
		
		//ID
		public RuleCall getControlsControlIDTerminalRuleCall_11_1_0_1() { return cControlsControlIDTerminalRuleCall_11_1_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}
	public class NodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sabsa.dasl.Dasl.Node");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNodeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRefKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRefAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRefIDTerminalRuleCall_4_0 = (RuleCall)cRefAssignment_4.eContents().get(0);
		private final Keyword cHostKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cHostAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cHostSTRINGTerminalRuleCall_6_0 = (RuleCall)cHostAssignment_6.eContents().get(0);
		private final Keyword cOsKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cOsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cOsSTRINGTerminalRuleCall_8_0 = (RuleCall)cOsAssignment_8.eContents().get(0);
		private final Keyword cTypeKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cValueAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cValueNodeTypeEnumRuleCall_10_0 = (RuleCall)cValueAssignment_10.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cComponentsKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cComponentsAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final CrossReference cComponentsComponentCrossReference_11_1_0 = (CrossReference)cComponentsAssignment_11_1.eContents().get(0);
		private final RuleCall cComponentsComponentIDTerminalRuleCall_11_1_0_1 = (RuleCall)cComponentsComponentCrossReference_11_1_0.eContents().get(1);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cControlsKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Assignment cControlsAssignment_12_1 = (Assignment)cGroup_12.eContents().get(1);
		private final CrossReference cControlsControlCrossReference_12_1_0 = (CrossReference)cControlsAssignment_12_1.eContents().get(0);
		private final RuleCall cControlsControlIDTerminalRuleCall_12_1_0_1 = (RuleCall)cControlsControlCrossReference_12_1_0.eContents().get(1);
		private final Group cGroup_13 = (Group)cGroup.eContents().get(13);
		private final Keyword cAssetsKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Assignment cAssetsAssignment_13_1 = (Assignment)cGroup_13.eContents().get(1);
		private final CrossReference cAssetsInformationAssetCrossReference_13_1_0 = (CrossReference)cAssetsAssignment_13_1.eContents().get(0);
		private final RuleCall cAssetsInformationAssetQualifiedNameParserRuleCall_13_1_0_1 = (RuleCall)cAssetsInformationAssetCrossReference_13_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		///**
		// * Nodes represent either a physical or virtual environment
		// * upon which components are deployed too.
		// */ Node:
		//	'node' name=ID '{'
		//	'ref' ref=ID
		//	'host' host=STRING
		//	'os' os=STRING
		//	'type' value=NodeType ('components' components+=[Component]*)? ('controls' controls+=[Control]*)? ('assets'
		//	assets+=[InformationAsset|QualifiedName]*)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'node' name=ID '{' 'ref' ref=ID 'host' host=STRING 'os' os=STRING 'type' value=NodeType ('components'
		//components+=[Component]*)? ('controls' controls+=[Control]*)? ('assets' assets+=[InformationAsset|QualifiedName]*)? '}'
		public Group getGroup() { return cGroup; }
		
		//'node'
		public Keyword getNodeKeyword_0() { return cNodeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'ref'
		public Keyword getRefKeyword_3() { return cRefKeyword_3; }
		
		//ref=ID
		public Assignment getRefAssignment_4() { return cRefAssignment_4; }
		
		//ID
		public RuleCall getRefIDTerminalRuleCall_4_0() { return cRefIDTerminalRuleCall_4_0; }
		
		//'host'
		public Keyword getHostKeyword_5() { return cHostKeyword_5; }
		
		//host=STRING
		public Assignment getHostAssignment_6() { return cHostAssignment_6; }
		
		//STRING
		public RuleCall getHostSTRINGTerminalRuleCall_6_0() { return cHostSTRINGTerminalRuleCall_6_0; }
		
		//'os'
		public Keyword getOsKeyword_7() { return cOsKeyword_7; }
		
		//os=STRING
		public Assignment getOsAssignment_8() { return cOsAssignment_8; }
		
		//STRING
		public RuleCall getOsSTRINGTerminalRuleCall_8_0() { return cOsSTRINGTerminalRuleCall_8_0; }
		
		//'type'
		public Keyword getTypeKeyword_9() { return cTypeKeyword_9; }
		
		//value=NodeType
		public Assignment getValueAssignment_10() { return cValueAssignment_10; }
		
		//NodeType
		public RuleCall getValueNodeTypeEnumRuleCall_10_0() { return cValueNodeTypeEnumRuleCall_10_0; }
		
		//('components' components+=[Component]*)?
		public Group getGroup_11() { return cGroup_11; }
		
		//'components'
		public Keyword getComponentsKeyword_11_0() { return cComponentsKeyword_11_0; }
		
		//components+=[Component]*
		public Assignment getComponentsAssignment_11_1() { return cComponentsAssignment_11_1; }
		
		//[Component]
		public CrossReference getComponentsComponentCrossReference_11_1_0() { return cComponentsComponentCrossReference_11_1_0; }
		
		//ID
		public RuleCall getComponentsComponentIDTerminalRuleCall_11_1_0_1() { return cComponentsComponentIDTerminalRuleCall_11_1_0_1; }
		
		//('controls' controls+=[Control]*)?
		public Group getGroup_12() { return cGroup_12; }
		
		//'controls'
		public Keyword getControlsKeyword_12_0() { return cControlsKeyword_12_0; }
		
		//controls+=[Control]*
		public Assignment getControlsAssignment_12_1() { return cControlsAssignment_12_1; }
		
		//[Control]
		public CrossReference getControlsControlCrossReference_12_1_0() { return cControlsControlCrossReference_12_1_0; }
		
		//ID
		public RuleCall getControlsControlIDTerminalRuleCall_12_1_0_1() { return cControlsControlIDTerminalRuleCall_12_1_0_1; }
		
		//('assets' assets+=[InformationAsset|QualifiedName]*)?
		public Group getGroup_13() { return cGroup_13; }
		
		//'assets'
		public Keyword getAssetsKeyword_13_0() { return cAssetsKeyword_13_0; }
		
		//assets+=[InformationAsset|QualifiedName]*
		public Assignment getAssetsAssignment_13_1() { return cAssetsAssignment_13_1; }
		
		//[InformationAsset|QualifiedName]
		public CrossReference getAssetsInformationAssetCrossReference_13_1_0() { return cAssetsInformationAssetCrossReference_13_1_0; }
		
		//QualifiedName
		public RuleCall getAssetsInformationAssetQualifiedNameParserRuleCall_13_1_0_1() { return cAssetsInformationAssetQualifiedNameParserRuleCall_13_1_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_14() { return cRightCurlyBracketKeyword_14; }
	}
	public class ComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sabsa.dasl.Dasl.Component");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComponentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRefKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRefAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRefIDTerminalRuleCall_4_0 = (RuleCall)cRefAssignment_4.eContents().get(0);
		private final Keyword cStereotypeKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cStereotypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStereotypeSTRINGTerminalRuleCall_6_0 = (RuleCall)cStereotypeAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cVendorKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cVendorAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cVendorSTRINGTerminalRuleCall_7_1_0 = (RuleCall)cVendorAssignment_7_1.eContents().get(0);
		private final Keyword cDescKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cDescAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cDescSTRINGTerminalRuleCall_9_0 = (RuleCall)cDescAssignment_9.eContents().get(0);
		private final Keyword cVersionKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cVersionAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cVersionSTRINGTerminalRuleCall_11_0 = (RuleCall)cVersionAssignment_11.eContents().get(0);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cAssetsKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Assignment cAssetsAssignment_12_1 = (Assignment)cGroup_12.eContents().get(1);
		private final CrossReference cAssetsInformationAssetCrossReference_12_1_0 = (CrossReference)cAssetsAssignment_12_1.eContents().get(0);
		private final RuleCall cAssetsInformationAssetQualifiedNameParserRuleCall_12_1_0_1 = (RuleCall)cAssetsInformationAssetCrossReference_12_1_0.eContents().get(1);
		private final Group cGroup_13 = (Group)cGroup.eContents().get(13);
		private final Keyword cControlsKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Assignment cControlsAssignment_13_1 = (Assignment)cGroup_13.eContents().get(1);
		private final CrossReference cControlsControlCrossReference_13_1_0 = (CrossReference)cControlsAssignment_13_1.eContents().get(0);
		private final RuleCall cControlsControlIDTerminalRuleCall_13_1_0_1 = (RuleCall)cControlsControlCrossReference_13_1_0.eContents().get(1);
		private final Assignment cComponentsAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cComponentsComponentParserRuleCall_14_0 = (RuleCall)cComponentsAssignment_14.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_15 = (Keyword)cGroup.eContents().get(15);
		
		//Component:
		//	'component' name=ID '{'
		//	'ref' ref=ID
		//	'stereotype' stereotype=STRING ('vendor' vendor=STRING)?
		//	'desc' desc=STRING
		//	'version' version=STRING ('assets' assets+=[InformationAsset|QualifiedName]*)? ('controls' controls+=[Control]*)?
		//	components+=Component*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'component' name=ID '{' 'ref' ref=ID 'stereotype' stereotype=STRING ('vendor' vendor=STRING)? 'desc' desc=STRING
		//'version' version=STRING ('assets' assets+=[InformationAsset|QualifiedName]*)? ('controls' controls+=[Control]*)?
		//components+=Component* '}'
		public Group getGroup() { return cGroup; }
		
		//'component'
		public Keyword getComponentKeyword_0() { return cComponentKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'ref'
		public Keyword getRefKeyword_3() { return cRefKeyword_3; }
		
		//ref=ID
		public Assignment getRefAssignment_4() { return cRefAssignment_4; }
		
		//ID
		public RuleCall getRefIDTerminalRuleCall_4_0() { return cRefIDTerminalRuleCall_4_0; }
		
		//'stereotype'
		public Keyword getStereotypeKeyword_5() { return cStereotypeKeyword_5; }
		
		//stereotype=STRING
		public Assignment getStereotypeAssignment_6() { return cStereotypeAssignment_6; }
		
		//STRING
		public RuleCall getStereotypeSTRINGTerminalRuleCall_6_0() { return cStereotypeSTRINGTerminalRuleCall_6_0; }
		
		//('vendor' vendor=STRING)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'vendor'
		public Keyword getVendorKeyword_7_0() { return cVendorKeyword_7_0; }
		
		//vendor=STRING
		public Assignment getVendorAssignment_7_1() { return cVendorAssignment_7_1; }
		
		//STRING
		public RuleCall getVendorSTRINGTerminalRuleCall_7_1_0() { return cVendorSTRINGTerminalRuleCall_7_1_0; }
		
		//'desc'
		public Keyword getDescKeyword_8() { return cDescKeyword_8; }
		
		//desc=STRING
		public Assignment getDescAssignment_9() { return cDescAssignment_9; }
		
		//STRING
		public RuleCall getDescSTRINGTerminalRuleCall_9_0() { return cDescSTRINGTerminalRuleCall_9_0; }
		
		//'version'
		public Keyword getVersionKeyword_10() { return cVersionKeyword_10; }
		
		//version=STRING
		public Assignment getVersionAssignment_11() { return cVersionAssignment_11; }
		
		//STRING
		public RuleCall getVersionSTRINGTerminalRuleCall_11_0() { return cVersionSTRINGTerminalRuleCall_11_0; }
		
		//('assets' assets+=[InformationAsset|QualifiedName]*)?
		public Group getGroup_12() { return cGroup_12; }
		
		//'assets'
		public Keyword getAssetsKeyword_12_0() { return cAssetsKeyword_12_0; }
		
		//assets+=[InformationAsset|QualifiedName]*
		public Assignment getAssetsAssignment_12_1() { return cAssetsAssignment_12_1; }
		
		//[InformationAsset|QualifiedName]
		public CrossReference getAssetsInformationAssetCrossReference_12_1_0() { return cAssetsInformationAssetCrossReference_12_1_0; }
		
		//QualifiedName
		public RuleCall getAssetsInformationAssetQualifiedNameParserRuleCall_12_1_0_1() { return cAssetsInformationAssetQualifiedNameParserRuleCall_12_1_0_1; }
		
		//('controls' controls+=[Control]*)?
		public Group getGroup_13() { return cGroup_13; }
		
		//'controls'
		public Keyword getControlsKeyword_13_0() { return cControlsKeyword_13_0; }
		
		//controls+=[Control]*
		public Assignment getControlsAssignment_13_1() { return cControlsAssignment_13_1; }
		
		//[Control]
		public CrossReference getControlsControlCrossReference_13_1_0() { return cControlsControlCrossReference_13_1_0; }
		
		//ID
		public RuleCall getControlsControlIDTerminalRuleCall_13_1_0_1() { return cControlsControlIDTerminalRuleCall_13_1_0_1; }
		
		//components+=Component*
		public Assignment getComponentsAssignment_14() { return cComponentsAssignment_14; }
		
		//Component
		public RuleCall getComponentsComponentParserRuleCall_14_0() { return cComponentsComponentParserRuleCall_14_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_15() { return cRightCurlyBracketKeyword_15; }
	}
	public class InformationAssetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sabsa.dasl.Dasl.InformationAsset");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInformationassetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRefKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRefAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRefIDTerminalRuleCall_4_0 = (RuleCall)cRefAssignment_4.eContents().get(0);
		private final Keyword cDescKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDescAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDescSTRINGTerminalRuleCall_6_0 = (RuleCall)cDescAssignment_6.eContents().get(0);
		private final Keyword cConfidentialityKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cConfidentialityAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cConfidentialityConfidentialityTypeEnumRuleCall_8_0 = (RuleCall)cConfidentialityAssignment_8.eContents().get(0);
		private final Keyword cIntegrityKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cIntegrityAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cIntegrityIntegrityTypeEnumRuleCall_10_0 = (RuleCall)cIntegrityAssignment_10.eContents().get(0);
		private final Keyword cAvailabilityKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cAvailabilityAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cAvailabilityAvailabilityTypeEnumRuleCall_12_0 = (RuleCall)cAvailabilityAssignment_12.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//InformationAsset:
		//	'informationasset' name=ID '{'
		//	'ref' ref=ID
		//	'desc' desc=STRING
		//	'confidentiality' confidentiality=ConfidentialityType
		//	'integrity' integrity=IntegrityType
		//	'availability' availability=AvailabilityType
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'informationasset' name=ID '{' 'ref' ref=ID 'desc' desc=STRING 'confidentiality' confidentiality=ConfidentialityType
		//'integrity' integrity=IntegrityType 'availability' availability=AvailabilityType '}'
		public Group getGroup() { return cGroup; }
		
		//'informationasset'
		public Keyword getInformationassetKeyword_0() { return cInformationassetKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'ref'
		public Keyword getRefKeyword_3() { return cRefKeyword_3; }
		
		//ref=ID
		public Assignment getRefAssignment_4() { return cRefAssignment_4; }
		
		//ID
		public RuleCall getRefIDTerminalRuleCall_4_0() { return cRefIDTerminalRuleCall_4_0; }
		
		//'desc'
		public Keyword getDescKeyword_5() { return cDescKeyword_5; }
		
		//desc=STRING
		public Assignment getDescAssignment_6() { return cDescAssignment_6; }
		
		//STRING
		public RuleCall getDescSTRINGTerminalRuleCall_6_0() { return cDescSTRINGTerminalRuleCall_6_0; }
		
		//'confidentiality'
		public Keyword getConfidentialityKeyword_7() { return cConfidentialityKeyword_7; }
		
		//confidentiality=ConfidentialityType
		public Assignment getConfidentialityAssignment_8() { return cConfidentialityAssignment_8; }
		
		//ConfidentialityType
		public RuleCall getConfidentialityConfidentialityTypeEnumRuleCall_8_0() { return cConfidentialityConfidentialityTypeEnumRuleCall_8_0; }
		
		//'integrity'
		public Keyword getIntegrityKeyword_9() { return cIntegrityKeyword_9; }
		
		//integrity=IntegrityType
		public Assignment getIntegrityAssignment_10() { return cIntegrityAssignment_10; }
		
		//IntegrityType
		public RuleCall getIntegrityIntegrityTypeEnumRuleCall_10_0() { return cIntegrityIntegrityTypeEnumRuleCall_10_0; }
		
		//'availability'
		public Keyword getAvailabilityKeyword_11() { return cAvailabilityKeyword_11; }
		
		//availability=AvailabilityType
		public Assignment getAvailabilityAssignment_12() { return cAvailabilityAssignment_12; }
		
		//AvailabilityType
		public RuleCall getAvailabilityAvailabilityTypeEnumRuleCall_12_0() { return cAvailabilityAvailabilityTypeEnumRuleCall_12_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_13() { return cRightCurlyBracketKeyword_13; }
	}
	public class FlowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sabsa.dasl.Dasl.Flow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFlowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cDescKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDescAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDescSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cDescAssignment_3_1.eContents().get(0);
		private final Keyword cFromKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFromAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cFromFlowEndpointCrossReference_5_0 = (CrossReference)cFromAssignment_5.eContents().get(0);
		private final RuleCall cFromFlowEndpointIDTerminalRuleCall_5_0_1 = (RuleCall)cFromFlowEndpointCrossReference_5_0.eContents().get(1);
		private final Keyword cToKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cToAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cToFlowEndpointCrossReference_7_0 = (CrossReference)cToAssignment_7.eContents().get(0);
		private final RuleCall cToFlowEndpointIDTerminalRuleCall_7_0_1 = (RuleCall)cToFlowEndpointCrossReference_7_0.eContents().get(1);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cAssetsKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cAssetsAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final CrossReference cAssetsInformationAssetCrossReference_8_1_0 = (CrossReference)cAssetsAssignment_8_1.eContents().get(0);
		private final RuleCall cAssetsInformationAssetQualifiedNameParserRuleCall_8_1_0_1 = (RuleCall)cAssetsInformationAssetCrossReference_8_1_0.eContents().get(1);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cControlsKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cControlsAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final CrossReference cControlsControlCrossReference_9_1_0 = (CrossReference)cControlsAssignment_9_1.eContents().get(0);
		private final RuleCall cControlsControlIDTerminalRuleCall_9_1_0_1 = (RuleCall)cControlsControlCrossReference_9_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//Flow:
		//	'flow' name=ID '{' ('desc' desc=STRING)?
		//	'from' from=[FlowEndpoint]
		//	'to' to=[FlowEndpoint] ('assets' assets+=[InformationAsset|QualifiedName]*)? ('controls' controls+=[Control]*)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'flow' name=ID '{' ('desc' desc=STRING)? 'from' from=[FlowEndpoint] 'to' to=[FlowEndpoint] ('assets'
		//assets+=[InformationAsset|QualifiedName]*)? ('controls' controls+=[Control]*)? '}'
		public Group getGroup() { return cGroup; }
		
		//'flow'
		public Keyword getFlowKeyword_0() { return cFlowKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('desc' desc=STRING)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'desc'
		public Keyword getDescKeyword_3_0() { return cDescKeyword_3_0; }
		
		//desc=STRING
		public Assignment getDescAssignment_3_1() { return cDescAssignment_3_1; }
		
		//STRING
		public RuleCall getDescSTRINGTerminalRuleCall_3_1_0() { return cDescSTRINGTerminalRuleCall_3_1_0; }
		
		//'from'
		public Keyword getFromKeyword_4() { return cFromKeyword_4; }
		
		//from=[FlowEndpoint]
		public Assignment getFromAssignment_5() { return cFromAssignment_5; }
		
		//[FlowEndpoint]
		public CrossReference getFromFlowEndpointCrossReference_5_0() { return cFromFlowEndpointCrossReference_5_0; }
		
		//ID
		public RuleCall getFromFlowEndpointIDTerminalRuleCall_5_0_1() { return cFromFlowEndpointIDTerminalRuleCall_5_0_1; }
		
		//'to'
		public Keyword getToKeyword_6() { return cToKeyword_6; }
		
		//to=[FlowEndpoint]
		public Assignment getToAssignment_7() { return cToAssignment_7; }
		
		//[FlowEndpoint]
		public CrossReference getToFlowEndpointCrossReference_7_0() { return cToFlowEndpointCrossReference_7_0; }
		
		//ID
		public RuleCall getToFlowEndpointIDTerminalRuleCall_7_0_1() { return cToFlowEndpointIDTerminalRuleCall_7_0_1; }
		
		//('assets' assets+=[InformationAsset|QualifiedName]*)?
		public Group getGroup_8() { return cGroup_8; }
		
		//'assets'
		public Keyword getAssetsKeyword_8_0() { return cAssetsKeyword_8_0; }
		
		//assets+=[InformationAsset|QualifiedName]*
		public Assignment getAssetsAssignment_8_1() { return cAssetsAssignment_8_1; }
		
		//[InformationAsset|QualifiedName]
		public CrossReference getAssetsInformationAssetCrossReference_8_1_0() { return cAssetsInformationAssetCrossReference_8_1_0; }
		
		//QualifiedName
		public RuleCall getAssetsInformationAssetQualifiedNameParserRuleCall_8_1_0_1() { return cAssetsInformationAssetQualifiedNameParserRuleCall_8_1_0_1; }
		
		//('controls' controls+=[Control]*)?
		public Group getGroup_9() { return cGroup_9; }
		
		//'controls'
		public Keyword getControlsKeyword_9_0() { return cControlsKeyword_9_0; }
		
		//controls+=[Control]*
		public Assignment getControlsAssignment_9_1() { return cControlsAssignment_9_1; }
		
		//[Control]
		public CrossReference getControlsControlCrossReference_9_1_0() { return cControlsControlCrossReference_9_1_0; }
		
		//ID
		public RuleCall getControlsControlIDTerminalRuleCall_9_1_0_1() { return cControlsControlIDTerminalRuleCall_9_1_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class ActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sabsa.dasl.Dasl.Actor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cDescKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDescAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDescSTRINGTerminalRuleCall_4_0 = (RuleCall)cDescAssignment_4.eContents().get(0);
		private final Keyword cRolesKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRolesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRolesSTRINGTerminalRuleCall_6_0 = (RuleCall)cRolesAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Actor:
		//	'actor' name=ID '{'
		//	'desc' desc=STRING
		//	'roles' roles=STRING
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'actor' name=ID '{' 'desc' desc=STRING 'roles' roles=STRING '}'
		public Group getGroup() { return cGroup; }
		
		//'actor'
		public Keyword getActorKeyword_0() { return cActorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'desc'
		public Keyword getDescKeyword_3() { return cDescKeyword_3; }
		
		//desc=STRING
		public Assignment getDescAssignment_4() { return cDescAssignment_4; }
		
		//STRING
		public RuleCall getDescSTRINGTerminalRuleCall_4_0() { return cDescSTRINGTerminalRuleCall_4_0; }
		
		//'roles'
		public Keyword getRolesKeyword_5() { return cRolesKeyword_5; }
		
		//roles=STRING
		public Assignment getRolesAssignment_6() { return cRolesAssignment_6; }
		
		//STRING
		public RuleCall getRolesSTRINGTerminalRuleCall_6_0() { return cRolesSTRINGTerminalRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class ControlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sabsa.dasl.Dasl.Control");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cControlKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRefKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRefAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRefIDTerminalRuleCall_4_0 = (RuleCall)cRefAssignment_4.eContents().get(0);
		private final Keyword cBaselineKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBaseAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cBaseBaseControlCrossReference_6_0 = (CrossReference)cBaseAssignment_6.eContents().get(0);
		private final RuleCall cBaseBaseControlIDTerminalRuleCall_6_0_1 = (RuleCall)cBaseBaseControlCrossReference_6_0.eContents().get(1);
		private final Keyword cDescriptionKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cDescAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cDescSTRINGTerminalRuleCall_8_0 = (RuleCall)cDescAssignment_8.eContents().get(0);
		private final Keyword cAttestationKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cAttAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cAttSTRINGTerminalRuleCall_10_0 = (RuleCall)cAttAssignment_10.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		///*
		//enum ControlType:
		//	System |
		//	Process |
		//	Contract
		//;
		//*/ Control:
		//	'control' name=ID '{'
		//	'ref' ref=ID
		//	'baseline' base=[BaseControl]
		//	'description' desc=STRING
		//	'attestation' att=STRING
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'control' name=ID '{' 'ref' ref=ID 'baseline' base=[BaseControl] 'description' desc=STRING 'attestation' att=STRING '}'
		public Group getGroup() { return cGroup; }
		
		//'control'
		public Keyword getControlKeyword_0() { return cControlKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'ref'
		public Keyword getRefKeyword_3() { return cRefKeyword_3; }
		
		//ref=ID
		public Assignment getRefAssignment_4() { return cRefAssignment_4; }
		
		//ID
		public RuleCall getRefIDTerminalRuleCall_4_0() { return cRefIDTerminalRuleCall_4_0; }
		
		//'baseline'
		public Keyword getBaselineKeyword_5() { return cBaselineKeyword_5; }
		
		//base=[BaseControl]
		public Assignment getBaseAssignment_6() { return cBaseAssignment_6; }
		
		//[BaseControl]
		public CrossReference getBaseBaseControlCrossReference_6_0() { return cBaseBaseControlCrossReference_6_0; }
		
		//ID
		public RuleCall getBaseBaseControlIDTerminalRuleCall_6_0_1() { return cBaseBaseControlIDTerminalRuleCall_6_0_1; }
		
		//'description'
		public Keyword getDescriptionKeyword_7() { return cDescriptionKeyword_7; }
		
		//desc=STRING
		public Assignment getDescAssignment_8() { return cDescAssignment_8; }
		
		//STRING
		public RuleCall getDescSTRINGTerminalRuleCall_8_0() { return cDescSTRINGTerminalRuleCall_8_0; }
		
		//'attestation'
		public Keyword getAttestationKeyword_9() { return cAttestationKeyword_9; }
		
		//att=STRING
		public Assignment getAttAssignment_10() { return cAttAssignment_10; }
		
		//STRING
		public RuleCall getAttSTRINGTerminalRuleCall_10_0() { return cAttSTRINGTerminalRuleCall_10_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}
	public class BaseControlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sabsa.dasl.Dasl.BaseControl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBaseControlKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cFamilyKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFamilyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFamilyNIST80053ARev4_FamilyTypeEnumRuleCall_4_0 = (RuleCall)cFamilyAssignment_4.eContents().get(0);
		private final Keyword cTitleKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTitleAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTitleSTRINGTerminalRuleCall_6_0 = (RuleCall)cTitleAssignment_6.eContents().get(0);
		private final Keyword cDescriptionKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cDescAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cDescSTRINGTerminalRuleCall_8_0 = (RuleCall)cDescAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//// Keyed to NIST80053A-Rev4
		//BaseControl:
		//	'baseControl' name=ID '{'
		//	'family' family=NIST80053ARev4_FamilyType
		//	'title' title=STRING
		//	'description' desc=STRING
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'baseControl' name=ID '{' 'family' family=NIST80053ARev4_FamilyType 'title' title=STRING 'description' desc=STRING '}'
		public Group getGroup() { return cGroup; }
		
		//'baseControl'
		public Keyword getBaseControlKeyword_0() { return cBaseControlKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'family'
		public Keyword getFamilyKeyword_3() { return cFamilyKeyword_3; }
		
		//family=NIST80053ARev4_FamilyType
		public Assignment getFamilyAssignment_4() { return cFamilyAssignment_4; }
		
		//NIST80053ARev4_FamilyType
		public RuleCall getFamilyNIST80053ARev4_FamilyTypeEnumRuleCall_4_0() { return cFamilyNIST80053ARev4_FamilyTypeEnumRuleCall_4_0; }
		
		//'title'
		public Keyword getTitleKeyword_5() { return cTitleKeyword_5; }
		
		//title=STRING
		public Assignment getTitleAssignment_6() { return cTitleAssignment_6; }
		
		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_6_0() { return cTitleSTRINGTerminalRuleCall_6_0; }
		
		//'description'
		public Keyword getDescriptionKeyword_7() { return cDescriptionKeyword_7; }
		
		//desc=STRING
		public Assignment getDescAssignment_8() { return cDescAssignment_8; }
		
		//STRING
		public RuleCall getDescSTRINGTerminalRuleCall_8_0() { return cDescSTRINGTerminalRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class AbstractElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sabsa.dasl.Dasl.AbstractElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInformationAssetParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComponentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cZoneParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNodeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cActorParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cControlParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cFlowParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cBaseControlParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//AbstractElement:
		//	InformationAsset | Component | Zone | Node | Actor | Control | Flow | BaseControl;
		@Override public ParserRule getRule() { return rule; }
		
		//InformationAsset | Component | Zone | Node | Actor | Control | Flow | BaseControl
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//InformationAsset
		public RuleCall getInformationAssetParserRuleCall_0() { return cInformationAssetParserRuleCall_0; }
		
		//Component
		public RuleCall getComponentParserRuleCall_1() { return cComponentParserRuleCall_1; }
		
		//Zone
		public RuleCall getZoneParserRuleCall_2() { return cZoneParserRuleCall_2; }
		
		//Node
		public RuleCall getNodeParserRuleCall_3() { return cNodeParserRuleCall_3; }
		
		//Actor
		public RuleCall getActorParserRuleCall_4() { return cActorParserRuleCall_4; }
		
		//Control
		public RuleCall getControlParserRuleCall_5() { return cControlParserRuleCall_5; }
		
		//Flow
		public RuleCall getFlowParserRuleCall_6() { return cFlowParserRuleCall_6; }
		
		//BaseControl
		public RuleCall getBaseControlParserRuleCall_7() { return cBaseControlParserRuleCall_7; }
	}
	public class FlowEndpointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sabsa.dasl.Dasl.FlowEndpoint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cComponentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNodeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cActorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//FlowEndpoint:
		//	Component | Node | Actor;
		@Override public ParserRule getRule() { return rule; }
		
		//Component | Node | Actor
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Component
		public RuleCall getComponentParserRuleCall_0() { return cComponentParserRuleCall_0; }
		
		//Node
		public RuleCall getNodeParserRuleCall_1() { return cNodeParserRuleCall_1; }
		
		//Actor
		public RuleCall getActorParserRuleCall_2() { return cActorParserRuleCall_2; }
	}
	
	public class NodeTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.sabsa.dasl.Dasl.NodeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPHYSICALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPHYSICALPHYSICALKeyword_0_0 = (Keyword)cPHYSICALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cVIRTUALEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cVIRTUALVIRTUALKeyword_1_0 = (Keyword)cVIRTUALEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCONTAINEREnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCONTAINERCONTAINERKeyword_2_0 = (Keyword)cCONTAINEREnumLiteralDeclaration_2.eContents().get(0);
		
		//enum NodeType:
		//	PHYSICAL | VIRTUAL | CONTAINER;
		public EnumRule getRule() { return rule; }
		
		//PHYSICAL | VIRTUAL | CONTAINER
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PHYSICAL
		public EnumLiteralDeclaration getPHYSICALEnumLiteralDeclaration_0() { return cPHYSICALEnumLiteralDeclaration_0; }
		
		//"PHYSICAL"
		public Keyword getPHYSICALPHYSICALKeyword_0_0() { return cPHYSICALPHYSICALKeyword_0_0; }
		
		//VIRTUAL
		public EnumLiteralDeclaration getVIRTUALEnumLiteralDeclaration_1() { return cVIRTUALEnumLiteralDeclaration_1; }
		
		//"VIRTUAL"
		public Keyword getVIRTUALVIRTUALKeyword_1_0() { return cVIRTUALVIRTUALKeyword_1_0; }
		
		//CONTAINER
		public EnumLiteralDeclaration getCONTAINEREnumLiteralDeclaration_2() { return cCONTAINEREnumLiteralDeclaration_2; }
		
		//"CONTAINER"
		public Keyword getCONTAINERCONTAINERKeyword_2_0() { return cCONTAINERCONTAINERKeyword_2_0; }
	}
	public class NIST80053ARev4_FamilyTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.sabsa.dasl.Dasl.NIST80053ARev4_FamilyType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cACCESS_CONTROLEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cACCESS_CONTROLACCESS_CONTROLKeyword_0_0 = (Keyword)cACCESS_CONTROLEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAWARENESS_AND_TRAININGEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAWARENESS_AND_TRAININGAWARENESS_AND_TRAININGKeyword_1_0 = (Keyword)cAWARENESS_AND_TRAININGEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cAUDIT_AND_ACCOUNTABILITYEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cAUDIT_AND_ACCOUNTABILITYAUDIT_AND_ACCOUNTABILITYKeyword_2_0 = (Keyword)cAUDIT_AND_ACCOUNTABILITYEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cSECURITY_ASSESSMENT_AND_AUTHORIZATIONEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cSECURITY_ASSESSMENT_AND_AUTHORIZATIONSECURITY_ASSESSMENT_AND_AUTHORIZATIONKeyword_3_0 = (Keyword)cSECURITY_ASSESSMENT_AND_AUTHORIZATIONEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cCONFIGURATION_MANAGEMENTEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cCONFIGURATION_MANAGEMENTCONFIGURATION_MANAGEMENTKeyword_4_0 = (Keyword)cCONFIGURATION_MANAGEMENTEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cCONTINGENCY_PLANNINGEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cCONTINGENCY_PLANNINGCONTINGENCY_PLANNINGKeyword_5_0 = (Keyword)cCONTINGENCY_PLANNINGEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cIDENTIFICATION_AND_AUTHENTICATIONEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cIDENTIFICATION_AND_AUTHENTICATIONIDENTIFICATION_AND_AUTHENTICATIONKeyword_6_0 = (Keyword)cIDENTIFICATION_AND_AUTHENTICATIONEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cINCIDENT_RESPONSEEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cINCIDENT_RESPONSEINCIDENT_RESPONSEKeyword_7_0 = (Keyword)cINCIDENT_RESPONSEEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cMAINTENANCEEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cMAINTENANCEMAINTENANCEKeyword_8_0 = (Keyword)cMAINTENANCEEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cMEDIA_PROTECTIONEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cMEDIA_PROTECTIONMEDIA_PROTECTIONKeyword_9_0 = (Keyword)cMEDIA_PROTECTIONEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cPHYSICAL_AND_ENVIRONMENTAL_PROTECTIONEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cPHYSICAL_AND_ENVIRONMENTAL_PROTECTIONPHYSICAL_AND_ENVIRONMENTAL_PROTECTIONKeyword_10_0 = (Keyword)cPHYSICAL_AND_ENVIRONMENTAL_PROTECTIONEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cPLANNINGEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cPLANNINGPLANNINGKeyword_11_0 = (Keyword)cPLANNINGEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cPROGRAM_MANAGEMENTEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cPROGRAM_MANAGEMENTPROGRAM_MANAGEMENTKeyword_12_0 = (Keyword)cPROGRAM_MANAGEMENTEnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cPERSONNEL_SECURITYEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cPERSONNEL_SECURITYPERSONNEL_SECURITYKeyword_13_0 = (Keyword)cPERSONNEL_SECURITYEnumLiteralDeclaration_13.eContents().get(0);
		private final EnumLiteralDeclaration cRISK_ASSESSMENTEnumLiteralDeclaration_14 = (EnumLiteralDeclaration)cAlternatives.eContents().get(14);
		private final Keyword cRISK_ASSESSMENTRISK_ASSESSMENTKeyword_14_0 = (Keyword)cRISK_ASSESSMENTEnumLiteralDeclaration_14.eContents().get(0);
		private final EnumLiteralDeclaration cSYSTEM_AND_SERVICES_ACQUISITIONEnumLiteralDeclaration_15 = (EnumLiteralDeclaration)cAlternatives.eContents().get(15);
		private final Keyword cSYSTEM_AND_SERVICES_ACQUISITIONSYSTEM_AND_SERVICES_ACQUISITIONKeyword_15_0 = (Keyword)cSYSTEM_AND_SERVICES_ACQUISITIONEnumLiteralDeclaration_15.eContents().get(0);
		private final EnumLiteralDeclaration cSYSTEM_AND_COMMUNICATIONS_PROTECTIONEnumLiteralDeclaration_16 = (EnumLiteralDeclaration)cAlternatives.eContents().get(16);
		private final Keyword cSYSTEM_AND_COMMUNICATIONS_PROTECTIONSYSTEM_AND_COMMUNICATIONS_PROTECTIONKeyword_16_0 = (Keyword)cSYSTEM_AND_COMMUNICATIONS_PROTECTIONEnumLiteralDeclaration_16.eContents().get(0);
		private final EnumLiteralDeclaration cSYSTEM_AND_INFORMATION_INTEGRITYEnumLiteralDeclaration_17 = (EnumLiteralDeclaration)cAlternatives.eContents().get(17);
		private final Keyword cSYSTEM_AND_INFORMATION_INTEGRITYSYSTEM_AND_INFORMATION_INTEGRITYKeyword_17_0 = (Keyword)cSYSTEM_AND_INFORMATION_INTEGRITYEnumLiteralDeclaration_17.eContents().get(0);
		
		//enum NIST80053ARev4_FamilyType:
		//	ACCESS_CONTROL |
		//	AWARENESS_AND_TRAINING |
		//	AUDIT_AND_ACCOUNTABILITY |
		//	SECURITY_ASSESSMENT_AND_AUTHORIZATION |
		//	CONFIGURATION_MANAGEMENT |
		//	CONTINGENCY_PLANNING |
		//	IDENTIFICATION_AND_AUTHENTICATION |
		//	INCIDENT_RESPONSE |
		//	MAINTENANCE |
		//	MEDIA_PROTECTION |
		//	PHYSICAL_AND_ENVIRONMENTAL_PROTECTION |
		//	PLANNING |
		//	PROGRAM_MANAGEMENT |
		//	PERSONNEL_SECURITY |
		//	RISK_ASSESSMENT |
		//	SYSTEM_AND_SERVICES_ACQUISITION |
		//	SYSTEM_AND_COMMUNICATIONS_PROTECTION |
		//	SYSTEM_AND_INFORMATION_INTEGRITY;
		public EnumRule getRule() { return rule; }
		
		//ACCESS_CONTROL | AWARENESS_AND_TRAINING | AUDIT_AND_ACCOUNTABILITY | SECURITY_ASSESSMENT_AND_AUTHORIZATION |
		//CONFIGURATION_MANAGEMENT | CONTINGENCY_PLANNING | IDENTIFICATION_AND_AUTHENTICATION | INCIDENT_RESPONSE | MAINTENANCE |
		//MEDIA_PROTECTION | PHYSICAL_AND_ENVIRONMENTAL_PROTECTION | PLANNING | PROGRAM_MANAGEMENT | PERSONNEL_SECURITY |
		//RISK_ASSESSMENT | SYSTEM_AND_SERVICES_ACQUISITION | SYSTEM_AND_COMMUNICATIONS_PROTECTION |
		//SYSTEM_AND_INFORMATION_INTEGRITY
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ACCESS_CONTROL
		public EnumLiteralDeclaration getACCESS_CONTROLEnumLiteralDeclaration_0() { return cACCESS_CONTROLEnumLiteralDeclaration_0; }
		
		//"ACCESS_CONTROL"
		public Keyword getACCESS_CONTROLACCESS_CONTROLKeyword_0_0() { return cACCESS_CONTROLACCESS_CONTROLKeyword_0_0; }
		
		//AWARENESS_AND_TRAINING
		public EnumLiteralDeclaration getAWARENESS_AND_TRAININGEnumLiteralDeclaration_1() { return cAWARENESS_AND_TRAININGEnumLiteralDeclaration_1; }
		
		//"AWARENESS_AND_TRAINING"
		public Keyword getAWARENESS_AND_TRAININGAWARENESS_AND_TRAININGKeyword_1_0() { return cAWARENESS_AND_TRAININGAWARENESS_AND_TRAININGKeyword_1_0; }
		
		//AUDIT_AND_ACCOUNTABILITY
		public EnumLiteralDeclaration getAUDIT_AND_ACCOUNTABILITYEnumLiteralDeclaration_2() { return cAUDIT_AND_ACCOUNTABILITYEnumLiteralDeclaration_2; }
		
		//"AUDIT_AND_ACCOUNTABILITY"
		public Keyword getAUDIT_AND_ACCOUNTABILITYAUDIT_AND_ACCOUNTABILITYKeyword_2_0() { return cAUDIT_AND_ACCOUNTABILITYAUDIT_AND_ACCOUNTABILITYKeyword_2_0; }
		
		//SECURITY_ASSESSMENT_AND_AUTHORIZATION
		public EnumLiteralDeclaration getSECURITY_ASSESSMENT_AND_AUTHORIZATIONEnumLiteralDeclaration_3() { return cSECURITY_ASSESSMENT_AND_AUTHORIZATIONEnumLiteralDeclaration_3; }
		
		//"SECURITY_ASSESSMENT_AND_AUTHORIZATION"
		public Keyword getSECURITY_ASSESSMENT_AND_AUTHORIZATIONSECURITY_ASSESSMENT_AND_AUTHORIZATIONKeyword_3_0() { return cSECURITY_ASSESSMENT_AND_AUTHORIZATIONSECURITY_ASSESSMENT_AND_AUTHORIZATIONKeyword_3_0; }
		
		//CONFIGURATION_MANAGEMENT
		public EnumLiteralDeclaration getCONFIGURATION_MANAGEMENTEnumLiteralDeclaration_4() { return cCONFIGURATION_MANAGEMENTEnumLiteralDeclaration_4; }
		
		//"CONFIGURATION_MANAGEMENT"
		public Keyword getCONFIGURATION_MANAGEMENTCONFIGURATION_MANAGEMENTKeyword_4_0() { return cCONFIGURATION_MANAGEMENTCONFIGURATION_MANAGEMENTKeyword_4_0; }
		
		//CONTINGENCY_PLANNING
		public EnumLiteralDeclaration getCONTINGENCY_PLANNINGEnumLiteralDeclaration_5() { return cCONTINGENCY_PLANNINGEnumLiteralDeclaration_5; }
		
		//"CONTINGENCY_PLANNING"
		public Keyword getCONTINGENCY_PLANNINGCONTINGENCY_PLANNINGKeyword_5_0() { return cCONTINGENCY_PLANNINGCONTINGENCY_PLANNINGKeyword_5_0; }
		
		//IDENTIFICATION_AND_AUTHENTICATION
		public EnumLiteralDeclaration getIDENTIFICATION_AND_AUTHENTICATIONEnumLiteralDeclaration_6() { return cIDENTIFICATION_AND_AUTHENTICATIONEnumLiteralDeclaration_6; }
		
		//"IDENTIFICATION_AND_AUTHENTICATION"
		public Keyword getIDENTIFICATION_AND_AUTHENTICATIONIDENTIFICATION_AND_AUTHENTICATIONKeyword_6_0() { return cIDENTIFICATION_AND_AUTHENTICATIONIDENTIFICATION_AND_AUTHENTICATIONKeyword_6_0; }
		
		//INCIDENT_RESPONSE
		public EnumLiteralDeclaration getINCIDENT_RESPONSEEnumLiteralDeclaration_7() { return cINCIDENT_RESPONSEEnumLiteralDeclaration_7; }
		
		//"INCIDENT_RESPONSE"
		public Keyword getINCIDENT_RESPONSEINCIDENT_RESPONSEKeyword_7_0() { return cINCIDENT_RESPONSEINCIDENT_RESPONSEKeyword_7_0; }
		
		//MAINTENANCE
		public EnumLiteralDeclaration getMAINTENANCEEnumLiteralDeclaration_8() { return cMAINTENANCEEnumLiteralDeclaration_8; }
		
		//"MAINTENANCE"
		public Keyword getMAINTENANCEMAINTENANCEKeyword_8_0() { return cMAINTENANCEMAINTENANCEKeyword_8_0; }
		
		//MEDIA_PROTECTION
		public EnumLiteralDeclaration getMEDIA_PROTECTIONEnumLiteralDeclaration_9() { return cMEDIA_PROTECTIONEnumLiteralDeclaration_9; }
		
		//"MEDIA_PROTECTION"
		public Keyword getMEDIA_PROTECTIONMEDIA_PROTECTIONKeyword_9_0() { return cMEDIA_PROTECTIONMEDIA_PROTECTIONKeyword_9_0; }
		
		//PHYSICAL_AND_ENVIRONMENTAL_PROTECTION
		public EnumLiteralDeclaration getPHYSICAL_AND_ENVIRONMENTAL_PROTECTIONEnumLiteralDeclaration_10() { return cPHYSICAL_AND_ENVIRONMENTAL_PROTECTIONEnumLiteralDeclaration_10; }
		
		//"PHYSICAL_AND_ENVIRONMENTAL_PROTECTION"
		public Keyword getPHYSICAL_AND_ENVIRONMENTAL_PROTECTIONPHYSICAL_AND_ENVIRONMENTAL_PROTECTIONKeyword_10_0() { return cPHYSICAL_AND_ENVIRONMENTAL_PROTECTIONPHYSICAL_AND_ENVIRONMENTAL_PROTECTIONKeyword_10_0; }
		
		//PLANNING
		public EnumLiteralDeclaration getPLANNINGEnumLiteralDeclaration_11() { return cPLANNINGEnumLiteralDeclaration_11; }
		
		//"PLANNING"
		public Keyword getPLANNINGPLANNINGKeyword_11_0() { return cPLANNINGPLANNINGKeyword_11_0; }
		
		//PROGRAM_MANAGEMENT
		public EnumLiteralDeclaration getPROGRAM_MANAGEMENTEnumLiteralDeclaration_12() { return cPROGRAM_MANAGEMENTEnumLiteralDeclaration_12; }
		
		//"PROGRAM_MANAGEMENT"
		public Keyword getPROGRAM_MANAGEMENTPROGRAM_MANAGEMENTKeyword_12_0() { return cPROGRAM_MANAGEMENTPROGRAM_MANAGEMENTKeyword_12_0; }
		
		//PERSONNEL_SECURITY
		public EnumLiteralDeclaration getPERSONNEL_SECURITYEnumLiteralDeclaration_13() { return cPERSONNEL_SECURITYEnumLiteralDeclaration_13; }
		
		//"PERSONNEL_SECURITY"
		public Keyword getPERSONNEL_SECURITYPERSONNEL_SECURITYKeyword_13_0() { return cPERSONNEL_SECURITYPERSONNEL_SECURITYKeyword_13_0; }
		
		//RISK_ASSESSMENT
		public EnumLiteralDeclaration getRISK_ASSESSMENTEnumLiteralDeclaration_14() { return cRISK_ASSESSMENTEnumLiteralDeclaration_14; }
		
		//"RISK_ASSESSMENT"
		public Keyword getRISK_ASSESSMENTRISK_ASSESSMENTKeyword_14_0() { return cRISK_ASSESSMENTRISK_ASSESSMENTKeyword_14_0; }
		
		//SYSTEM_AND_SERVICES_ACQUISITION
		public EnumLiteralDeclaration getSYSTEM_AND_SERVICES_ACQUISITIONEnumLiteralDeclaration_15() { return cSYSTEM_AND_SERVICES_ACQUISITIONEnumLiteralDeclaration_15; }
		
		//"SYSTEM_AND_SERVICES_ACQUISITION"
		public Keyword getSYSTEM_AND_SERVICES_ACQUISITIONSYSTEM_AND_SERVICES_ACQUISITIONKeyword_15_0() { return cSYSTEM_AND_SERVICES_ACQUISITIONSYSTEM_AND_SERVICES_ACQUISITIONKeyword_15_0; }
		
		//SYSTEM_AND_COMMUNICATIONS_PROTECTION
		public EnumLiteralDeclaration getSYSTEM_AND_COMMUNICATIONS_PROTECTIONEnumLiteralDeclaration_16() { return cSYSTEM_AND_COMMUNICATIONS_PROTECTIONEnumLiteralDeclaration_16; }
		
		//"SYSTEM_AND_COMMUNICATIONS_PROTECTION"
		public Keyword getSYSTEM_AND_COMMUNICATIONS_PROTECTIONSYSTEM_AND_COMMUNICATIONS_PROTECTIONKeyword_16_0() { return cSYSTEM_AND_COMMUNICATIONS_PROTECTIONSYSTEM_AND_COMMUNICATIONS_PROTECTIONKeyword_16_0; }
		
		//SYSTEM_AND_INFORMATION_INTEGRITY
		public EnumLiteralDeclaration getSYSTEM_AND_INFORMATION_INTEGRITYEnumLiteralDeclaration_17() { return cSYSTEM_AND_INFORMATION_INTEGRITYEnumLiteralDeclaration_17; }
		
		//"SYSTEM_AND_INFORMATION_INTEGRITY"
		public Keyword getSYSTEM_AND_INFORMATION_INTEGRITYSYSTEM_AND_INFORMATION_INTEGRITYKeyword_17_0() { return cSYSTEM_AND_INFORMATION_INTEGRITYSYSTEM_AND_INFORMATION_INTEGRITYKeyword_17_0; }
	}
	public class ConfidentialityTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.sabsa.dasl.Dasl.ConfidentialityType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPublicEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPublicPublicKeyword_0_0 = (Keyword)cPublicEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cInternalEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cInternalInternalKeyword_1_0 = (Keyword)cInternalEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cConfidentialEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cConfidentialConfidentialKeyword_2_0 = (Keyword)cConfidentialEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cRestrictedEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cRestrictedRestrictedKeyword_3_0 = (Keyword)cRestrictedEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum ConfidentialityType:
		//	Public | Internal | Confidential | Restricted;
		public EnumRule getRule() { return rule; }
		
		//Public | Internal | Confidential | Restricted
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Public
		public EnumLiteralDeclaration getPublicEnumLiteralDeclaration_0() { return cPublicEnumLiteralDeclaration_0; }
		
		//"Public"
		public Keyword getPublicPublicKeyword_0_0() { return cPublicPublicKeyword_0_0; }
		
		//Internal
		public EnumLiteralDeclaration getInternalEnumLiteralDeclaration_1() { return cInternalEnumLiteralDeclaration_1; }
		
		//"Internal"
		public Keyword getInternalInternalKeyword_1_0() { return cInternalInternalKeyword_1_0; }
		
		//Confidential
		public EnumLiteralDeclaration getConfidentialEnumLiteralDeclaration_2() { return cConfidentialEnumLiteralDeclaration_2; }
		
		//"Confidential"
		public Keyword getConfidentialConfidentialKeyword_2_0() { return cConfidentialConfidentialKeyword_2_0; }
		
		//Restricted
		public EnumLiteralDeclaration getRestrictedEnumLiteralDeclaration_3() { return cRestrictedEnumLiteralDeclaration_3; }
		
		//"Restricted"
		public Keyword getRestrictedRestrictedKeyword_3_0() { return cRestrictedRestrictedKeyword_3_0; }
	}
	public class IntegrityTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.sabsa.dasl.Dasl.IntegrityType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAccurateEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAccurateAccurateKeyword_0_0 = (Keyword)cAccurateEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cHighlyTrustedEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cHighlyTrustedHighlyTrustedKeyword_1_0 = (Keyword)cHighlyTrustedEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cTrustedEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cTrustedTrustedKeyword_2_0 = (Keyword)cTrustedEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cUncontrolledEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cUncontrolledUncontrolledKeyword_3_0 = (Keyword)cUncontrolledEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum IntegrityType:
		//	Accurate | HighlyTrusted | Trusted | Uncontrolled;
		public EnumRule getRule() { return rule; }
		
		//Accurate | HighlyTrusted | Trusted | Uncontrolled
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Accurate
		public EnumLiteralDeclaration getAccurateEnumLiteralDeclaration_0() { return cAccurateEnumLiteralDeclaration_0; }
		
		//"Accurate"
		public Keyword getAccurateAccurateKeyword_0_0() { return cAccurateAccurateKeyword_0_0; }
		
		//HighlyTrusted
		public EnumLiteralDeclaration getHighlyTrustedEnumLiteralDeclaration_1() { return cHighlyTrustedEnumLiteralDeclaration_1; }
		
		//"HighlyTrusted"
		public Keyword getHighlyTrustedHighlyTrustedKeyword_1_0() { return cHighlyTrustedHighlyTrustedKeyword_1_0; }
		
		//Trusted
		public EnumLiteralDeclaration getTrustedEnumLiteralDeclaration_2() { return cTrustedEnumLiteralDeclaration_2; }
		
		//"Trusted"
		public Keyword getTrustedTrustedKeyword_2_0() { return cTrustedTrustedKeyword_2_0; }
		
		//Uncontrolled
		public EnumLiteralDeclaration getUncontrolledEnumLiteralDeclaration_3() { return cUncontrolledEnumLiteralDeclaration_3; }
		
		//"Uncontrolled"
		public Keyword getUncontrolledUncontrolledKeyword_3_0() { return cUncontrolledUncontrolledKeyword_3_0; }
	}
	public class AvailabilityTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.sabsa.dasl.Dasl.AvailabilityType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cC1EnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cC1C1Keyword_0_0 = (Keyword)cC1EnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cC2EnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cC2C2Keyword_1_0 = (Keyword)cC2EnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cC3EnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cC3C3Keyword_2_0 = (Keyword)cC3EnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cC4EnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cC4C4Keyword_3_0 = (Keyword)cC4EnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cPlasticEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cPlasticPlasticKeyword_4_0 = (Keyword)cPlasticEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum AvailabilityType:
		//	C1 | C2 | C3 | C4 | Plastic;
		public EnumRule getRule() { return rule; }
		
		//C1 | C2 | C3 | C4 | Plastic
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//C1
		public EnumLiteralDeclaration getC1EnumLiteralDeclaration_0() { return cC1EnumLiteralDeclaration_0; }
		
		//"C1"
		public Keyword getC1C1Keyword_0_0() { return cC1C1Keyword_0_0; }
		
		//C2
		public EnumLiteralDeclaration getC2EnumLiteralDeclaration_1() { return cC2EnumLiteralDeclaration_1; }
		
		//"C2"
		public Keyword getC2C2Keyword_1_0() { return cC2C2Keyword_1_0; }
		
		//C3
		public EnumLiteralDeclaration getC3EnumLiteralDeclaration_2() { return cC3EnumLiteralDeclaration_2; }
		
		//"C3"
		public Keyword getC3C3Keyword_2_0() { return cC3C3Keyword_2_0; }
		
		//C4
		public EnumLiteralDeclaration getC4EnumLiteralDeclaration_3() { return cC4EnumLiteralDeclaration_3; }
		
		//"C4"
		public Keyword getC4C4Keyword_3_0() { return cC4C4Keyword_3_0; }
		
		//Plastic
		public EnumLiteralDeclaration getPlasticEnumLiteralDeclaration_4() { return cPlasticEnumLiteralDeclaration_4; }
		
		//"Plastic"
		public Keyword getPlasticPlasticKeyword_4_0() { return cPlasticPlasticKeyword_4_0; }
	}
	
	private final SecurityModelElements pSecurityModel;
	private final NodeTypeElements eNodeType;
	private final TerminalRule tID;
	private final QualifiedNameElements pQualifiedName;
	private final QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private final ImportElements pImport;
	private final ZoneElements pZone;
	private final NodeElements pNode;
	private final ComponentElements pComponent;
	private final InformationAssetElements pInformationAsset;
	private final FlowElements pFlow;
	private final ActorElements pActor;
	private final ControlElements pControl;
	private final BaseControlElements pBaseControl;
	private final NIST80053ARev4_FamilyTypeElements eNIST80053ARev4_FamilyType;
	private final ConfidentialityTypeElements eConfidentialityType;
	private final IntegrityTypeElements eIntegrityType;
	private final AvailabilityTypeElements eAvailabilityType;
	private final AbstractElementElements pAbstractElement;
	private final FlowEndpointElements pFlowEndpoint;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DaslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSecurityModel = new SecurityModelElements();
		this.eNodeType = new NodeTypeElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.sabsa.dasl.Dasl.ID");
		this.pQualifiedName = new QualifiedNameElements();
		this.pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements();
		this.pImport = new ImportElements();
		this.pZone = new ZoneElements();
		this.pNode = new NodeElements();
		this.pComponent = new ComponentElements();
		this.pInformationAsset = new InformationAssetElements();
		this.pFlow = new FlowElements();
		this.pActor = new ActorElements();
		this.pControl = new ControlElements();
		this.pBaseControl = new BaseControlElements();
		this.eNIST80053ARev4_FamilyType = new NIST80053ARev4_FamilyTypeElements();
		this.eConfidentialityType = new ConfidentialityTypeElements();
		this.eIntegrityType = new IntegrityTypeElements();
		this.eAvailabilityType = new AvailabilityTypeElements();
		this.pAbstractElement = new AbstractElementElements();
		this.pFlowEndpoint = new FlowEndpointElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.sabsa.dasl.Dasl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// The security view of the architecture - this can be expanded to other views later.
	//SecurityModel:
	//	imports+=Import*
	//	//	includes+=(Include)*
	//	elements+=AbstractElement*;
	public SecurityModelElements getSecurityModelAccess() {
		return pSecurityModel;
	}
	
	public ParserRule getSecurityModelRule() {
		return getSecurityModelAccess().getRule();
	}
	
	//enum NodeType:
	//	PHYSICAL | VIRTUAL | CONTAINER;
	public NodeTypeElements getNodeTypeAccess() {
		return eNodeType;
	}
	
	public EnumRule getNodeTypeRule() {
		return getNodeTypeAccess().getRule();
	}
	
	//@Override
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_' | '.' | '-') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9' | '.' | '-')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	QualifiedName '.*'?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return pQualifiedNameWithWildcard;
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	////Include:
	////  'include' includedModel = [SecurityModel | STRING]
	////;
	//Import:
	//	'import' importURI=STRING;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	///**
	// * Zones represent trust boundaries for nodes and
	// * dictate which zones are allowed to connect.
	// */ Zone:
	//	'zone' name=ID '{'
	//	'trustLevel' trust=INT
	//	'ingress' ingressZones+=[Zone]*
	//	'egress' egressZones+=[Zone]*
	//	'nodes' nodes+=[Node]* ('controls' controls+=[Control]*)?
	//	'}';
	public ZoneElements getZoneAccess() {
		return pZone;
	}
	
	public ParserRule getZoneRule() {
		return getZoneAccess().getRule();
	}
	
	///**
	// * Nodes represent either a physical or virtual environment
	// * upon which components are deployed too.
	// */ Node:
	//	'node' name=ID '{'
	//	'ref' ref=ID
	//	'host' host=STRING
	//	'os' os=STRING
	//	'type' value=NodeType ('components' components+=[Component]*)? ('controls' controls+=[Control]*)? ('assets'
	//	assets+=[InformationAsset|QualifiedName]*)?
	//	'}';
	public NodeElements getNodeAccess() {
		return pNode;
	}
	
	public ParserRule getNodeRule() {
		return getNodeAccess().getRule();
	}
	
	//Component:
	//	'component' name=ID '{'
	//	'ref' ref=ID
	//	'stereotype' stereotype=STRING ('vendor' vendor=STRING)?
	//	'desc' desc=STRING
	//	'version' version=STRING ('assets' assets+=[InformationAsset|QualifiedName]*)? ('controls' controls+=[Control]*)?
	//	components+=Component*
	//	'}';
	public ComponentElements getComponentAccess() {
		return pComponent;
	}
	
	public ParserRule getComponentRule() {
		return getComponentAccess().getRule();
	}
	
	//InformationAsset:
	//	'informationasset' name=ID '{'
	//	'ref' ref=ID
	//	'desc' desc=STRING
	//	'confidentiality' confidentiality=ConfidentialityType
	//	'integrity' integrity=IntegrityType
	//	'availability' availability=AvailabilityType
	//	'}';
	public InformationAssetElements getInformationAssetAccess() {
		return pInformationAsset;
	}
	
	public ParserRule getInformationAssetRule() {
		return getInformationAssetAccess().getRule();
	}
	
	//Flow:
	//	'flow' name=ID '{' ('desc' desc=STRING)?
	//	'from' from=[FlowEndpoint]
	//	'to' to=[FlowEndpoint] ('assets' assets+=[InformationAsset|QualifiedName]*)? ('controls' controls+=[Control]*)?
	//	'}';
	public FlowElements getFlowAccess() {
		return pFlow;
	}
	
	public ParserRule getFlowRule() {
		return getFlowAccess().getRule();
	}
	
	//Actor:
	//	'actor' name=ID '{'
	//	'desc' desc=STRING
	//	'roles' roles=STRING
	//	'}';
	public ActorElements getActorAccess() {
		return pActor;
	}
	
	public ParserRule getActorRule() {
		return getActorAccess().getRule();
	}
	
	///*
	//enum ControlType:
	//	System |
	//	Process |
	//	Contract
	//;
	//*/ Control:
	//	'control' name=ID '{'
	//	'ref' ref=ID
	//	'baseline' base=[BaseControl]
	//	'description' desc=STRING
	//	'attestation' att=STRING
	//	'}';
	public ControlElements getControlAccess() {
		return pControl;
	}
	
	public ParserRule getControlRule() {
		return getControlAccess().getRule();
	}
	
	//// Keyed to NIST80053A-Rev4
	//BaseControl:
	//	'baseControl' name=ID '{'
	//	'family' family=NIST80053ARev4_FamilyType
	//	'title' title=STRING
	//	'description' desc=STRING
	//	'}';
	public BaseControlElements getBaseControlAccess() {
		return pBaseControl;
	}
	
	public ParserRule getBaseControlRule() {
		return getBaseControlAccess().getRule();
	}
	
	//enum NIST80053ARev4_FamilyType:
	//	ACCESS_CONTROL |
	//	AWARENESS_AND_TRAINING |
	//	AUDIT_AND_ACCOUNTABILITY |
	//	SECURITY_ASSESSMENT_AND_AUTHORIZATION |
	//	CONFIGURATION_MANAGEMENT |
	//	CONTINGENCY_PLANNING |
	//	IDENTIFICATION_AND_AUTHENTICATION |
	//	INCIDENT_RESPONSE |
	//	MAINTENANCE |
	//	MEDIA_PROTECTION |
	//	PHYSICAL_AND_ENVIRONMENTAL_PROTECTION |
	//	PLANNING |
	//	PROGRAM_MANAGEMENT |
	//	PERSONNEL_SECURITY |
	//	RISK_ASSESSMENT |
	//	SYSTEM_AND_SERVICES_ACQUISITION |
	//	SYSTEM_AND_COMMUNICATIONS_PROTECTION |
	//	SYSTEM_AND_INFORMATION_INTEGRITY;
	public NIST80053ARev4_FamilyTypeElements getNIST80053ARev4_FamilyTypeAccess() {
		return eNIST80053ARev4_FamilyType;
	}
	
	public EnumRule getNIST80053ARev4_FamilyTypeRule() {
		return getNIST80053ARev4_FamilyTypeAccess().getRule();
	}
	
	//enum ConfidentialityType:
	//	Public | Internal | Confidential | Restricted;
	public ConfidentialityTypeElements getConfidentialityTypeAccess() {
		return eConfidentialityType;
	}
	
	public EnumRule getConfidentialityTypeRule() {
		return getConfidentialityTypeAccess().getRule();
	}
	
	//enum IntegrityType:
	//	Accurate | HighlyTrusted | Trusted | Uncontrolled;
	public IntegrityTypeElements getIntegrityTypeAccess() {
		return eIntegrityType;
	}
	
	public EnumRule getIntegrityTypeRule() {
		return getIntegrityTypeAccess().getRule();
	}
	
	//enum AvailabilityType:
	//	C1 | C2 | C3 | C4 | Plastic;
	public AvailabilityTypeElements getAvailabilityTypeAccess() {
		return eAvailabilityType;
	}
	
	public EnumRule getAvailabilityTypeRule() {
		return getAvailabilityTypeAccess().getRule();
	}
	
	//AbstractElement:
	//	InformationAsset | Component | Zone | Node | Actor | Control | Flow | BaseControl;
	public AbstractElementElements getAbstractElementAccess() {
		return pAbstractElement;
	}
	
	public ParserRule getAbstractElementRule() {
		return getAbstractElementAccess().getRule();
	}
	
	//FlowEndpoint:
	//	Component | Node | Actor;
	public FlowEndpointElements getFlowEndpointAccess() {
		return pFlowEndpoint;
	}
	
	public ParserRule getFlowEndpointRule() {
		return getFlowEndpointAccess().getRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
