/**
 * generated by Xtext 2.19.0
 */
package org.sabsa.dasl.dasl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

import org.sabsa.dasl.dasl.Control;
import org.sabsa.dasl.dasl.DaslPackage;
import org.sabsa.dasl.dasl.Flow;
import org.sabsa.dasl.dasl.FlowEndpoint;
import org.sabsa.dasl.dasl.InformationAsset;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Flow</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.sabsa.dasl.dasl.impl.FlowImpl#getDesc <em>Desc</em>}</li>
 *   <li>{@link org.sabsa.dasl.dasl.impl.FlowImpl#getFrom <em>From</em>}</li>
 *   <li>{@link org.sabsa.dasl.dasl.impl.FlowImpl#getTo <em>To</em>}</li>
 *   <li>{@link org.sabsa.dasl.dasl.impl.FlowImpl#getAssets <em>Assets</em>}</li>
 *   <li>{@link org.sabsa.dasl.dasl.impl.FlowImpl#getControls <em>Controls</em>}</li>
 * </ul>
 *
 * @generated
 */
public class FlowImpl extends AbstractElementImpl implements Flow
{
  /**
   * The default value of the '{@link #getDesc() <em>Desc</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDesc()
   * @generated
   * @ordered
   */
  protected static final String DESC_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDesc() <em>Desc</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDesc()
   * @generated
   * @ordered
   */
  protected String desc = DESC_EDEFAULT;

  /**
   * The cached value of the '{@link #getFrom() <em>From</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFrom()
   * @generated
   * @ordered
   */
  protected FlowEndpoint from;

  /**
   * The cached value of the '{@link #getTo() <em>To</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTo()
   * @generated
   * @ordered
   */
  protected FlowEndpoint to;

  /**
   * The cached value of the '{@link #getAssets() <em>Assets</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAssets()
   * @generated
   * @ordered
   */
  protected EList<InformationAsset> assets;

  /**
   * The cached value of the '{@link #getControls() <em>Controls</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getControls()
   * @generated
   * @ordered
   */
  protected EList<Control> controls;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FlowImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DaslPackage.Literals.FLOW;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDesc()
  {
    return desc;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDesc(String newDesc)
  {
    String oldDesc = desc;
    desc = newDesc;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DaslPackage.FLOW__DESC, oldDesc, desc));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FlowEndpoint getFrom()
  {
    if (from != null && from.eIsProxy())
    {
      InternalEObject oldFrom = (InternalEObject)from;
      from = (FlowEndpoint)eResolveProxy(oldFrom);
      if (from != oldFrom)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, DaslPackage.FLOW__FROM, oldFrom, from));
      }
    }
    return from;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FlowEndpoint basicGetFrom()
  {
    return from;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFrom(FlowEndpoint newFrom)
  {
    FlowEndpoint oldFrom = from;
    from = newFrom;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DaslPackage.FLOW__FROM, oldFrom, from));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FlowEndpoint getTo()
  {
    if (to != null && to.eIsProxy())
    {
      InternalEObject oldTo = (InternalEObject)to;
      to = (FlowEndpoint)eResolveProxy(oldTo);
      if (to != oldTo)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, DaslPackage.FLOW__TO, oldTo, to));
      }
    }
    return to;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FlowEndpoint basicGetTo()
  {
    return to;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTo(FlowEndpoint newTo)
  {
    FlowEndpoint oldTo = to;
    to = newTo;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DaslPackage.FLOW__TO, oldTo, to));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<InformationAsset> getAssets()
  {
    if (assets == null)
    {
      assets = new EObjectResolvingEList<InformationAsset>(InformationAsset.class, this, DaslPackage.FLOW__ASSETS);
    }
    return assets;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Control> getControls()
  {
    if (controls == null)
    {
      controls = new EObjectResolvingEList<Control>(Control.class, this, DaslPackage.FLOW__CONTROLS);
    }
    return controls;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DaslPackage.FLOW__DESC:
        return getDesc();
      case DaslPackage.FLOW__FROM:
        if (resolve) return getFrom();
        return basicGetFrom();
      case DaslPackage.FLOW__TO:
        if (resolve) return getTo();
        return basicGetTo();
      case DaslPackage.FLOW__ASSETS:
        return getAssets();
      case DaslPackage.FLOW__CONTROLS:
        return getControls();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DaslPackage.FLOW__DESC:
        setDesc((String)newValue);
        return;
      case DaslPackage.FLOW__FROM:
        setFrom((FlowEndpoint)newValue);
        return;
      case DaslPackage.FLOW__TO:
        setTo((FlowEndpoint)newValue);
        return;
      case DaslPackage.FLOW__ASSETS:
        getAssets().clear();
        getAssets().addAll((Collection<? extends InformationAsset>)newValue);
        return;
      case DaslPackage.FLOW__CONTROLS:
        getControls().clear();
        getControls().addAll((Collection<? extends Control>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DaslPackage.FLOW__DESC:
        setDesc(DESC_EDEFAULT);
        return;
      case DaslPackage.FLOW__FROM:
        setFrom((FlowEndpoint)null);
        return;
      case DaslPackage.FLOW__TO:
        setTo((FlowEndpoint)null);
        return;
      case DaslPackage.FLOW__ASSETS:
        getAssets().clear();
        return;
      case DaslPackage.FLOW__CONTROLS:
        getControls().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DaslPackage.FLOW__DESC:
        return DESC_EDEFAULT == null ? desc != null : !DESC_EDEFAULT.equals(desc);
      case DaslPackage.FLOW__FROM:
        return from != null;
      case DaslPackage.FLOW__TO:
        return to != null;
      case DaslPackage.FLOW__ASSETS:
        return assets != null && !assets.isEmpty();
      case DaslPackage.FLOW__CONTROLS:
        return controls != null && !controls.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (desc: ");
    result.append(desc);
    result.append(')');
    return result.toString();
  }

} //FlowImpl
