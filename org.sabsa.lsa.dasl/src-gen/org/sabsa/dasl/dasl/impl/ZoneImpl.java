/**
 * generated by Xtext 2.12.0
 */
package org.sabsa.dasl.dasl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

import org.sabsa.dasl.dasl.Control;
import org.sabsa.dasl.dasl.DaslPackage;
import org.sabsa.dasl.dasl.Node;
import org.sabsa.dasl.dasl.Zone;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Zone</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.sabsa.dasl.dasl.impl.ZoneImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.sabsa.dasl.dasl.impl.ZoneImpl#getTrust <em>Trust</em>}</li>
 *   <li>{@link org.sabsa.dasl.dasl.impl.ZoneImpl#getIngressZones <em>Ingress Zones</em>}</li>
 *   <li>{@link org.sabsa.dasl.dasl.impl.ZoneImpl#getEgressZones <em>Egress Zones</em>}</li>
 *   <li>{@link org.sabsa.dasl.dasl.impl.ZoneImpl#getNodes <em>Nodes</em>}</li>
 *   <li>{@link org.sabsa.dasl.dasl.impl.ZoneImpl#getControls <em>Controls</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ZoneImpl extends AbstractElementImpl implements Zone
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getTrust() <em>Trust</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTrust()
   * @generated
   * @ordered
   */
  protected static final int TRUST_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getTrust() <em>Trust</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTrust()
   * @generated
   * @ordered
   */
  protected int trust = TRUST_EDEFAULT;

  /**
   * The cached value of the '{@link #getIngressZones() <em>Ingress Zones</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIngressZones()
   * @generated
   * @ordered
   */
  protected EList<Zone> ingressZones;

  /**
   * The cached value of the '{@link #getEgressZones() <em>Egress Zones</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEgressZones()
   * @generated
   * @ordered
   */
  protected EList<Zone> egressZones;

  /**
   * The cached value of the '{@link #getNodes() <em>Nodes</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNodes()
   * @generated
   * @ordered
   */
  protected EList<Node> nodes;

  /**
   * The cached value of the '{@link #getControls() <em>Controls</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getControls()
   * @generated
   * @ordered
   */
  protected EList<Control> controls;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ZoneImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DaslPackage.Literals.ZONE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DaslPackage.ZONE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getTrust()
  {
    return trust;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTrust(int newTrust)
  {
    int oldTrust = trust;
    trust = newTrust;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DaslPackage.ZONE__TRUST, oldTrust, trust));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Zone> getIngressZones()
  {
    if (ingressZones == null)
    {
      ingressZones = new EObjectResolvingEList<Zone>(Zone.class, this, DaslPackage.ZONE__INGRESS_ZONES);
    }
    return ingressZones;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Zone> getEgressZones()
  {
    if (egressZones == null)
    {
      egressZones = new EObjectResolvingEList<Zone>(Zone.class, this, DaslPackage.ZONE__EGRESS_ZONES);
    }
    return egressZones;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Node> getNodes()
  {
    if (nodes == null)
    {
      nodes = new EObjectResolvingEList<Node>(Node.class, this, DaslPackage.ZONE__NODES);
    }
    return nodes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Control> getControls()
  {
    if (controls == null)
    {
      controls = new EObjectResolvingEList<Control>(Control.class, this, DaslPackage.ZONE__CONTROLS);
    }
    return controls;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DaslPackage.ZONE__NAME:
        return getName();
      case DaslPackage.ZONE__TRUST:
        return getTrust();
      case DaslPackage.ZONE__INGRESS_ZONES:
        return getIngressZones();
      case DaslPackage.ZONE__EGRESS_ZONES:
        return getEgressZones();
      case DaslPackage.ZONE__NODES:
        return getNodes();
      case DaslPackage.ZONE__CONTROLS:
        return getControls();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DaslPackage.ZONE__NAME:
        setName((String)newValue);
        return;
      case DaslPackage.ZONE__TRUST:
        setTrust((Integer)newValue);
        return;
      case DaslPackage.ZONE__INGRESS_ZONES:
        getIngressZones().clear();
        getIngressZones().addAll((Collection<? extends Zone>)newValue);
        return;
      case DaslPackage.ZONE__EGRESS_ZONES:
        getEgressZones().clear();
        getEgressZones().addAll((Collection<? extends Zone>)newValue);
        return;
      case DaslPackage.ZONE__NODES:
        getNodes().clear();
        getNodes().addAll((Collection<? extends Node>)newValue);
        return;
      case DaslPackage.ZONE__CONTROLS:
        getControls().clear();
        getControls().addAll((Collection<? extends Control>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DaslPackage.ZONE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case DaslPackage.ZONE__TRUST:
        setTrust(TRUST_EDEFAULT);
        return;
      case DaslPackage.ZONE__INGRESS_ZONES:
        getIngressZones().clear();
        return;
      case DaslPackage.ZONE__EGRESS_ZONES:
        getEgressZones().clear();
        return;
      case DaslPackage.ZONE__NODES:
        getNodes().clear();
        return;
      case DaslPackage.ZONE__CONTROLS:
        getControls().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DaslPackage.ZONE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case DaslPackage.ZONE__TRUST:
        return trust != TRUST_EDEFAULT;
      case DaslPackage.ZONE__INGRESS_ZONES:
        return ingressZones != null && !ingressZones.isEmpty();
      case DaslPackage.ZONE__EGRESS_ZONES:
        return egressZones != null && !egressZones.isEmpty();
      case DaslPackage.ZONE__NODES:
        return nodes != null && !nodes.isEmpty();
      case DaslPackage.ZONE__CONTROLS:
        return controls != null && !controls.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", trust: ");
    result.append(trust);
    result.append(')');
    return result.toString();
  }

} //ZoneImpl
