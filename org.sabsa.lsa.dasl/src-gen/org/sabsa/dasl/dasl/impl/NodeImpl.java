/**
 * generated by Xtext 2.19.0
 */
package org.sabsa.dasl.dasl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

import org.sabsa.dasl.dasl.Component;
import org.sabsa.dasl.dasl.Control;
import org.sabsa.dasl.dasl.DaslPackage;
import org.sabsa.dasl.dasl.InformationAsset;
import org.sabsa.dasl.dasl.Node;
import org.sabsa.dasl.dasl.NodeType;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Node</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.sabsa.dasl.dasl.impl.NodeImpl#getRef <em>Ref</em>}</li>
 *   <li>{@link org.sabsa.dasl.dasl.impl.NodeImpl#getHost <em>Host</em>}</li>
 *   <li>{@link org.sabsa.dasl.dasl.impl.NodeImpl#getOs <em>Os</em>}</li>
 *   <li>{@link org.sabsa.dasl.dasl.impl.NodeImpl#getValue <em>Value</em>}</li>
 *   <li>{@link org.sabsa.dasl.dasl.impl.NodeImpl#getComponents <em>Components</em>}</li>
 *   <li>{@link org.sabsa.dasl.dasl.impl.NodeImpl#getControls <em>Controls</em>}</li>
 *   <li>{@link org.sabsa.dasl.dasl.impl.NodeImpl#getAssets <em>Assets</em>}</li>
 * </ul>
 *
 * @generated
 */
public class NodeImpl extends AbstractElementImpl implements Node
{
  /**
   * The default value of the '{@link #getRef() <em>Ref</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRef()
   * @generated
   * @ordered
   */
  protected static final String REF_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getRef() <em>Ref</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRef()
   * @generated
   * @ordered
   */
  protected String ref = REF_EDEFAULT;

  /**
   * The default value of the '{@link #getHost() <em>Host</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHost()
   * @generated
   * @ordered
   */
  protected static final String HOST_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getHost() <em>Host</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHost()
   * @generated
   * @ordered
   */
  protected String host = HOST_EDEFAULT;

  /**
   * The default value of the '{@link #getOs() <em>Os</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOs()
   * @generated
   * @ordered
   */
  protected static final String OS_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getOs() <em>Os</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOs()
   * @generated
   * @ordered
   */
  protected String os = OS_EDEFAULT;

  /**
   * The default value of the '{@link #getValue() <em>Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValue()
   * @generated
   * @ordered
   */
  protected static final NodeType VALUE_EDEFAULT = NodeType.PHYSICAL;

  /**
   * The cached value of the '{@link #getValue() <em>Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValue()
   * @generated
   * @ordered
   */
  protected NodeType value = VALUE_EDEFAULT;

  /**
   * The cached value of the '{@link #getComponents() <em>Components</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComponents()
   * @generated
   * @ordered
   */
  protected EList<Component> components;

  /**
   * The cached value of the '{@link #getControls() <em>Controls</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getControls()
   * @generated
   * @ordered
   */
  protected EList<Control> controls;

  /**
   * The cached value of the '{@link #getAssets() <em>Assets</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAssets()
   * @generated
   * @ordered
   */
  protected EList<InformationAsset> assets;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NodeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DaslPackage.Literals.NODE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getRef()
  {
    return ref;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRef(String newRef)
  {
    String oldRef = ref;
    ref = newRef;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DaslPackage.NODE__REF, oldRef, ref));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getHost()
  {
    return host;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setHost(String newHost)
  {
    String oldHost = host;
    host = newHost;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DaslPackage.NODE__HOST, oldHost, host));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getOs()
  {
    return os;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOs(String newOs)
  {
    String oldOs = os;
    os = newOs;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DaslPackage.NODE__OS, oldOs, os));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NodeType getValue()
  {
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setValue(NodeType newValue)
  {
    NodeType oldValue = value;
    value = newValue == null ? VALUE_EDEFAULT : newValue;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DaslPackage.NODE__VALUE, oldValue, value));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Component> getComponents()
  {
    if (components == null)
    {
      components = new EObjectResolvingEList<Component>(Component.class, this, DaslPackage.NODE__COMPONENTS);
    }
    return components;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Control> getControls()
  {
    if (controls == null)
    {
      controls = new EObjectResolvingEList<Control>(Control.class, this, DaslPackage.NODE__CONTROLS);
    }
    return controls;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<InformationAsset> getAssets()
  {
    if (assets == null)
    {
      assets = new EObjectResolvingEList<InformationAsset>(InformationAsset.class, this, DaslPackage.NODE__ASSETS);
    }
    return assets;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DaslPackage.NODE__REF:
        return getRef();
      case DaslPackage.NODE__HOST:
        return getHost();
      case DaslPackage.NODE__OS:
        return getOs();
      case DaslPackage.NODE__VALUE:
        return getValue();
      case DaslPackage.NODE__COMPONENTS:
        return getComponents();
      case DaslPackage.NODE__CONTROLS:
        return getControls();
      case DaslPackage.NODE__ASSETS:
        return getAssets();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DaslPackage.NODE__REF:
        setRef((String)newValue);
        return;
      case DaslPackage.NODE__HOST:
        setHost((String)newValue);
        return;
      case DaslPackage.NODE__OS:
        setOs((String)newValue);
        return;
      case DaslPackage.NODE__VALUE:
        setValue((NodeType)newValue);
        return;
      case DaslPackage.NODE__COMPONENTS:
        getComponents().clear();
        getComponents().addAll((Collection<? extends Component>)newValue);
        return;
      case DaslPackage.NODE__CONTROLS:
        getControls().clear();
        getControls().addAll((Collection<? extends Control>)newValue);
        return;
      case DaslPackage.NODE__ASSETS:
        getAssets().clear();
        getAssets().addAll((Collection<? extends InformationAsset>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DaslPackage.NODE__REF:
        setRef(REF_EDEFAULT);
        return;
      case DaslPackage.NODE__HOST:
        setHost(HOST_EDEFAULT);
        return;
      case DaslPackage.NODE__OS:
        setOs(OS_EDEFAULT);
        return;
      case DaslPackage.NODE__VALUE:
        setValue(VALUE_EDEFAULT);
        return;
      case DaslPackage.NODE__COMPONENTS:
        getComponents().clear();
        return;
      case DaslPackage.NODE__CONTROLS:
        getControls().clear();
        return;
      case DaslPackage.NODE__ASSETS:
        getAssets().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DaslPackage.NODE__REF:
        return REF_EDEFAULT == null ? ref != null : !REF_EDEFAULT.equals(ref);
      case DaslPackage.NODE__HOST:
        return HOST_EDEFAULT == null ? host != null : !HOST_EDEFAULT.equals(host);
      case DaslPackage.NODE__OS:
        return OS_EDEFAULT == null ? os != null : !OS_EDEFAULT.equals(os);
      case DaslPackage.NODE__VALUE:
        return value != VALUE_EDEFAULT;
      case DaslPackage.NODE__COMPONENTS:
        return components != null && !components.isEmpty();
      case DaslPackage.NODE__CONTROLS:
        return controls != null && !controls.isEmpty();
      case DaslPackage.NODE__ASSETS:
        return assets != null && !assets.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (ref: ");
    result.append(ref);
    result.append(", host: ");
    result.append(host);
    result.append(", os: ");
    result.append(os);
    result.append(", value: ");
    result.append(value);
    result.append(')');
    return result.toString();
  }

} //NodeImpl
