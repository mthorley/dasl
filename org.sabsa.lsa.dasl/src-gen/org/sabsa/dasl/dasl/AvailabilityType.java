/**
 * generated by Xtext 2.19.0
 */
package org.sabsa.dasl.dasl;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.eclipse.emf.common.util.Enumerator;

/**
 * <!-- begin-user-doc -->
 * A representation of the literals of the enumeration '<em><b>Availability Type</b></em>',
 * and utility methods for working with them.
 * <!-- end-user-doc -->
 * @see org.sabsa.dasl.dasl.DaslPackage#getAvailabilityType()
 * @model
 * @generated
 */
public enum AvailabilityType implements Enumerator
{
  /**
   * The '<em><b>C1</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #C1_VALUE
   * @generated
   * @ordered
   */
  C1(0, "C1", "C1"),

  /**
   * The '<em><b>C2</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #C2_VALUE
   * @generated
   * @ordered
   */
  C2(1, "C2", "C2"),

  /**
   * The '<em><b>C3</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #C3_VALUE
   * @generated
   * @ordered
   */
  C3(2, "C3", "C3"),

  /**
   * The '<em><b>C4</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #C4_VALUE
   * @generated
   * @ordered
   */
  C4(3, "C4", "C4"),

  /**
   * The '<em><b>Plastic</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #PLASTIC_VALUE
   * @generated
   * @ordered
   */
  PLASTIC(4, "Plastic", "Plastic");

  /**
   * The '<em><b>C1</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #C1
   * @model
   * @generated
   * @ordered
   */
  public static final int C1_VALUE = 0;

  /**
   * The '<em><b>C2</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #C2
   * @model
   * @generated
   * @ordered
   */
  public static final int C2_VALUE = 1;

  /**
   * The '<em><b>C3</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #C3
   * @model
   * @generated
   * @ordered
   */
  public static final int C3_VALUE = 2;

  /**
   * The '<em><b>C4</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #C4
   * @model
   * @generated
   * @ordered
   */
  public static final int C4_VALUE = 3;

  /**
   * The '<em><b>Plastic</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #PLASTIC
   * @model name="Plastic"
   * @generated
   * @ordered
   */
  public static final int PLASTIC_VALUE = 4;

  /**
   * An array of all the '<em><b>Availability Type</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static final AvailabilityType[] VALUES_ARRAY =
    new AvailabilityType[]
    {
      C1,
      C2,
      C3,
      C4,
      PLASTIC,
    };

  /**
   * A public read-only list of all the '<em><b>Availability Type</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static final List<AvailabilityType> VALUES = Collections.unmodifiableList(Arrays.asList(VALUES_ARRAY));

  /**
   * Returns the '<em><b>Availability Type</b></em>' literal with the specified literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param literal the literal.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static AvailabilityType get(String literal)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      AvailabilityType result = VALUES_ARRAY[i];
      if (result.toString().equals(literal))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>Availability Type</b></em>' literal with the specified name.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param name the name.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static AvailabilityType getByName(String name)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      AvailabilityType result = VALUES_ARRAY[i];
      if (result.getName().equals(name))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>Availability Type</b></em>' literal with the specified integer value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the integer value.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static AvailabilityType get(int value)
  {
    switch (value)
    {
      case C1_VALUE: return C1;
      case C2_VALUE: return C2;
      case C3_VALUE: return C3;
      case C4_VALUE: return C4;
      case PLASTIC_VALUE: return PLASTIC;
    }
    return null;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final int value;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String name;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String literal;

  /**
   * Only this class can construct instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private AvailabilityType(int value, String name, String literal)
  {
    this.value = value;
    this.name = name;
    this.literal = literal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getValue()
  {
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getLiteral()
  {
    return literal;
  }

  /**
   * Returns the literal value of the enumerator, which is its string representation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    return literal;
  }
  
} //AvailabilityType
