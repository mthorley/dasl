/**
 * generated by Xtext 2.12.0
 */
package org.sabsa.dasl.tests;

import com.google.inject.Inject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.XtextRunner;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.sabsa.dasl.dasl.AbstractElement;
import org.sabsa.dasl.dasl.Flow;
import org.sabsa.dasl.dasl.SecurityModel;
import org.sabsa.dasl.tests.DaslInjectorProvider;
import org.sabsa.dasl.validation.Validator;

@RunWith(XtextRunner.class)
@InjectWith(DaslInjectorProvider.class)
@SuppressWarnings("all")
public class DaslParsingTest {
  @Inject
  private ParseHelper<SecurityModel> parseHelper;
  
  @Test
  public void loadModel() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("zone Zone1 {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("trustLevel 1");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("ingress");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("egress");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("nodes Node1");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("zone Zone2 {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("trustLevel 3");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("ingress Zone1");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("egress");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("nodes Node2");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("node Node1 {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("ref N1");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("host \"\"");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("os \"Redhat\"");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("type PHYSICAL");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components Component1");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("node Node2 {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("ref N2");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("host \"\"");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("os \"Redhat\"");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("type PHYSICAL");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components Component2");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("component Component1 {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("ref C1");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("stereotype \"component1\"");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("desc \"component1\"");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("version \"1.0\"");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("assets");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("component Component2 {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("ref C2");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("stereotype \"component2\"");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("desc \"component2\"");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("version \"1.0\"");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("assets");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("flow ValidZoneFlow {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("from Component1 to Component2");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("informationassets");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("controls");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("flow InValidZoneFlow {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("from Component2 to Component1");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("informationassets");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("controls");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      final SecurityModel result = this.parseHelper.parse(_builder);
      Assert.assertNotNull(result);
      Assert.assertTrue(result.eResource().getErrors().isEmpty());
      AbstractElement _get = result.getElements().get(6);
      Validator.doesFlowViolateZoneRules(((Flow) _get));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
