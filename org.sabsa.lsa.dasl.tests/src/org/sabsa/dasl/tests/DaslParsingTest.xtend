/*
 * generated by Xtext 2.12.0
 */
package org.sabsa.dasl.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith
import org.sabsa.dasl.dasl.SecurityModel
import org.sabsa.dasl.validation.Validator
import org.sabsa.dasl.dasl.Flow

@RunWith(XtextRunner)
@InjectWith(DaslInjectorProvider)
class DaslParsingTest {
	@Inject
	ParseHelper<SecurityModel> parseHelper
		
	@Test
	def void loadModel() {
		val result = parseHelper.parse('''
			zone Zone1 {
				trustLevel 1
				ingress
				egress
				nodes Node1
			}
			
			zone Zone2 {
				trustLevel 3
				ingress Zone1
				egress
				nodes Node2
			}
			
			node Node1 {
				ref N1
				host ""
				os "Redhat"
				type PHYSICAL
				components Component1
			}
			
			node Node2 {
				ref N2
				host ""
				os "Redhat"
				type PHYSICAL
				components Component2
			}

			component Component1 {
				ref C1
				stereotype "component1"
				desc "component1"
				version "1.0"
				assets
			}
			
			component Component2 {
				ref C2
				stereotype "component2"
				desc "component2"
				version "1.0"
				assets
			}
			
			flow ValidZoneFlow {
				from Component1 to Component2
				informationassets
				controls
			}
			
			flow InValidZoneFlow {
				from Component2 to Component1
				informationassets
				controls
			}
			
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		Validator.doesFlowViolateZoneRules(result.elements.get(6) as Flow)
	}
	
	// expect
	
}
